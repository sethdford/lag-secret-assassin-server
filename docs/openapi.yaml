openapi: 3.1.0
info:
  title: Assassin Game API
  description: |
    Comprehensive API for the Assassin Game platform, supporting game creation, player management, 
    kill reporting, real-time notifications, interactive mapping, data analytics, security monitoring,
    subscription management, payment processing, and comprehensive privacy controls.
    
    Features include multiple verification methods, shrinking zone mechanics, safe zone system,
    location-based gameplay, data export capabilities, and support for nationwide games with 1000+ players.
  version: 2.0.0
  contact:
    name: Assassin Game Development Team
    email: support@assassingame.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3002
    description: Local development server
  - url: https://api.assassingame.com/{environment}
    description: Production API server
    variables:
      environment:
        enum:
          - dev
          - stage
          - prod
        default: dev

tags:
  - name: Authentication
    description: User authentication and authorization endpoints
  - name: Games
    description: Game management and lifecycle endpoints
  - name: Players
    description: Player management and profile endpoints
  - name: Kills
    description: Kill reporting and verification endpoints
  - name: Location
    description: Location tracking and validation endpoints
  - name: Safe Zones
    description: Safe zone creation and management endpoints
  - name: Map
    description: Interactive map and geospatial data endpoints
  - name: Data Export
    description: Game data export and analytics endpoints
  - name: Statistics
    description: Player and game statistics endpoints
  - name: Notifications
    description: Real-time notification endpoints
  - name: WebSocket
    description: WebSocket connection and messaging
  - name: Shrinking Zone
    description: Shrinking zone mechanics and progression
  - name: Payments
    description: Payment processing and transactions
  - name: Subscriptions
    description: Subscription management and billing
  - name: Security
    description: Security monitoring and threat detection
  - name: Privacy
    description: Privacy settings and data protection
  - name: Admin
    description: Administrative functions and oversight

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from authentication endpoints
    cognitoAuth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://cognito-idp.{region}.amazonaws.com/{userPoolId}/oauth2/authorize
          scopes:
            openid: Standard OpenID scope
            profile: User profile information
            email: User email information
    websocketAuth:
      type: apiKey
      in: query
      name: token
      description: JWT token for WebSocket authentication
    adminAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Admin-level JWT token with elevated permissions

  schemas:
    # Core Domain Objects
    Game:
      type: object
      required:
        - id
        - name
        - status
        - createdBy
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the game
        name:
          type: string
          description: Name of the game
          maxLength: 100
        description:
          type: string
          description: Detailed description of the game
          maxLength: 500
        status:
          type: string
          enum: [pending, active, paused, completed]
          description: Current status of the game
        entryFee:
          type: object
          properties:
            amount:
              type: number
              format: float
              minimum: 0
              description: Entry fee amount
            currency:
              type: string
              default: USD
              description: Currency code
        playerCount:
          type: integer
          minimum: 0
          description: Number of players currently in the game
        maxPlayers:
          type: integer
          minimum: 1
          description: Maximum number of players allowed
        createdBy:
          type: string
          description: ID of the player who created the game
        startTime:
          type: string
          format: date-time
          description: When the game started (ISO 8601)
        endTime:
          type: string
          format: date-time
          description: When the game ended (ISO 8601)
        createdAt:
          type: string
          format: date-time
          description: When the game was created (ISO 8601)
        updatedAt:
          type: string
          format: date-time
          description: When the game was last updated (ISO 8601)
        boundary:
          $ref: '#/components/schemas/GameBoundary'
        mapConfig:
          $ref: '#/components/schemas/MapConfiguration'
        shrinkingZoneConfig:
          $ref: '#/components/schemas/ShrinkingZoneConfiguration'
        safeZones:
          type: array
          items:
            type: string
          description: Array of safe zone IDs associated with this game

    Player:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the player
        name:
          type: string
          description: Player's display name
          maxLength: 50
        email:
          type: string
          format: email
          description: Player's email address
        profilePictureUrl:
          type: string
          format: uri
          description: URL to player's profile picture
        currentLocation:
          $ref: '#/components/schemas/Location'
        gameStats:
          $ref: '#/components/schemas/PlayerGameStats'
        privacySettings:
          $ref: '#/components/schemas/PrivacySettings'
        subscription:
          $ref: '#/components/schemas/SubscriptionInfo'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        lastActiveAt:
          type: string
          format: date-time
          description: When the player was last active

    Kill:
      type: object
      required:
        - id
        - killerPlayerId
        - targetPlayerId
        - gameId
        - status
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the kill
        killerPlayerId:
          type: string
          description: ID of the player who made the kill
        targetPlayerId:
          type: string
          description: ID of the player who was killed
        gameId:
          type: string
          description: ID of the game where the kill occurred
        status:
          type: string
          enum: [pending, verified, rejected, pending_death]
          description: Current verification status of the kill
        verificationType:
          type: string
          enum: [gps, qr_code, photo, nfc, admin]
          description: Method used for verification
        location:
          $ref: '#/components/schemas/Location'
        verificationData:
          type: object
          description: Additional data for verification (photos, QR codes, etc.)
        verifiedAt:
          type: string
          format: date-time
          description: When the kill was verified (ISO 8601)
        reportedAt:
          type: string
          format: date-time
          description: When the kill was reported (ISO 8601)
        verificationDeadline:
          type: string
          format: date-time
          description: Deadline for kill verification (ISO 8601)
        notes:
          type: string
          description: Additional notes or comments about the kill
          maxLength: 500

    Location:
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          format: double
          minimum: -90
          maximum: 90
          description: Latitude coordinate
        longitude:
          type: number
          format: double
          minimum: -180
          maximum: 180
          description: Longitude coordinate
        accuracy:
          type: number
          format: float
          minimum: 0
          description: Location accuracy in meters
        timestamp:
          type: string
          format: date-time
          description: When the location was recorded (ISO 8601)

    # Safe Zone Objects
    SafeZone:
      type: object
      required:
        - id
        - gameId
        - type
        - location
        - radiusMeters
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the safe zone
        gameId:
          type: string
          description: ID of the game this safe zone belongs to
        type:
          type: string
          enum: [public, private, timed, relocatable]
          description: Type of safe zone
        name:
          type: string
          description: Human-readable name for the safe zone
          maxLength: 100
        description:
          type: string
          description: Description of the safe zone
          maxLength: 500
        location:
          $ref: '#/components/schemas/Location'
        radiusMeters:
          type: number
          format: float
          minimum: 1
          maximum: 1000
          description: Radius of the safe zone in meters
        ownerId:
          type: string
          description: ID of the player who owns this safe zone (for private zones)
        isActive:
          type: boolean
          description: Whether the safe zone is currently active
        activationTime:
          type: string
          format: date-time
          description: When the safe zone becomes active (for timed zones)
        deactivationTime:
          type: string
          format: date-time
          description: When the safe zone becomes inactive (for timed zones)
        maxRelocations:
          type: integer
          minimum: 0
          description: Maximum number of times this zone can be relocated
        relocationsUsed:
          type: integer
          minimum: 0
          description: Number of relocations already used
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # Privacy and Settings
    PrivacySettings:
      type: object
      properties:
        locationSharingEnabled:
          type: boolean
          default: true
          description: Whether to share location with other players
        locationVisibility:
          type: string
          enum: [public, friends, private]
          default: friends
          description: Who can see the player's location
        profileVisibility:
          type: string
          enum: [public, friends, private]
          default: public
          description: Who can see the player's profile
        allowFriendRequests:
          type: boolean
          default: true
          description: Whether to accept friend requests
        showOnLeaderboards:
          type: boolean
          default: true
          description: Whether to appear on leaderboards
        allowGameInvitations:
          type: boolean
          default: true
          description: Whether to receive game invitations

    # Subscription Management
    SubscriptionTier:
      type: object
      required:
        - id
        - name
        - pricePerMonth
        - benefits
      properties:
        id:
          type: string
          description: Unique identifier for the subscription tier
        name:
          type: string
          description: Name of the subscription tier
        description:
          type: string
          description: Description of the subscription tier
        pricePerMonth:
          type: number
          format: float
          minimum: 0
          description: Monthly price in USD
        currency:
          type: string
          default: USD
          description: Currency code
        benefits:
          type: object
          properties:
            currencyBonus:
              type: number
              format: float
              description: Percentage bonus for in-game currency
            freeItems:
              type: array
              items:
                type: string
              description: List of free items included
            prioritySupport:
              type: boolean
              description: Whether tier includes priority support
            exclusiveFeatures:
              type: array
              items:
                type: string
              description: List of exclusive features

    SubscriptionInfo:
      type: object
      properties:
        tierId:
          type: string
          description: ID of the current subscription tier
        tierName:
          type: string
          description: Name of the current subscription tier
        status:
          type: string
          enum: [active, cancelled, expired, pending]
          description: Current subscription status
        startDate:
          type: string
          format: date-time
          description: When the subscription started
        endDate:
          type: string
          format: date-time
          description: When the subscription ends
        autoRenew:
          type: boolean
          description: Whether the subscription auto-renews
        paymentMethodId:
          type: string
          description: Stripe payment method ID

    # Map and Geospatial Objects
    MapConfiguration:
      type: object
      properties:
        centerLatitude:
          type: number
          format: double
          description: Center latitude for map display
        centerLongitude:
          type: number
          format: double
          description: Center longitude for map display
        defaultZoomLevel:
          type: integer
          minimum: 1
          maximum: 20
          description: Default zoom level for map display
        boundingBox:
          $ref: '#/components/schemas/BoundingBox'
        showHeatmap:
          type: boolean
          default: true
          description: Whether to show activity heatmap
        heatmapCellSize:
          type: number
          format: float
          minimum: 10
          maximum: 1000
          description: Cell size for heatmap in meters

    GameBoundary:
      type: object
      required:
        - coordinates
      properties:
        coordinates:
          type: array
          items:
            $ref: '#/components/schemas/Location'
          description: Array of coordinates defining the game boundary polygon
        type:
          type: string
          enum: [polygon, circle]
          default: polygon
          description: Type of boundary shape
        radius:
          type: number
          format: float
          description: Radius in meters (for circle boundaries)

    BoundingBox:
      type: object
      required:
        - northEast
        - southWest
      properties:
        northEast:
          $ref: '#/components/schemas/Location'
        southWest:
          $ref: '#/components/schemas/Location'

    HeatmapData:
      type: object
      properties:
        cellSize:
          type: number
          format: float
          description: Size of each heatmap cell in meters
        cells:
          type: array
          items:
            $ref: '#/components/schemas/HeatmapCell'
        generatedAt:
          type: string
          format: date-time
          description: When the heatmap was generated

    HeatmapCell:
      type: object
      required:
        - latitude
        - longitude
        - intensity
      properties:
        latitude:
          type: number
          format: double
          description: Center latitude of the cell
        longitude:
          type: number
          format: double
          description: Center longitude of the cell
        intensity:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Activity intensity (0-1)
        playerCount:
          type: integer
          minimum: 0
          description: Number of players in this cell
        killCount:
          type: integer
          minimum: 0
          description: Number of kills in this cell

    # Data Export Objects
    GameStatisticsExport:
      type: object
      properties:
        gameId:
          type: string
          description: Game identifier
        gameName:
          type: string
          description: Game name
        totalPlayers:
          type: integer
          description: Total number of players
        totalKills:
          type: integer
          description: Total number of kills
        averageGameDuration:
          type: number
          format: float
          description: Average game duration in minutes
        mostActiveRegions:
          type: array
          items:
            type: object
            properties:
              region:
                type: string
              activityScore:
                type: number
                format: float
        exportedAt:
          type: string
          format: date-time

    PlayerPerformanceExport:
      type: object
      properties:
        playerId:
          type: string
          description: Player identifier
        playerName:
          type: string
          description: Player name
        totalGamesPlayed:
          type: integer
          description: Total games participated in
        gamesWon:
          type: integer
          description: Number of games won
        totalKills:
          type: integer
          description: Total kills made
        averageSurvivalTime:
          type: number
          format: float
          description: Average survival time in minutes
        winRate:
          type: number
          format: float
          description: Win rate percentage
        killDeathRatio:
          type: number
          format: float
          description: Kill to death ratio
        exportedAt:
          type: string
          format: date-time

    LocationHeatmapData:
      type: object
      properties:
        gameId:
          type: string
          description: Game identifier
        cellSize:
          type: number
          format: float
          description: Size of heatmap cells in meters
        data:
          type: array
          items:
            $ref: '#/components/schemas/HeatmapCell'
        exportedAt:
          type: string
          format: date-time

    # Security Monitoring Objects
    SecurityMonitoringReport:
      type: object
      properties:
        reportId:
          type: string
          description: Unique report identifier
        generatedAt:
          type: string
          format: date-time
        timeRange:
          type: object
          properties:
            startTime:
              type: string
              format: date-time
            endTime:
              type: string
              format: date-time
        metrics:
          $ref: '#/components/schemas/SecurityMetrics'
        alerts:
          type: array
          items:
            $ref: '#/components/schemas/SecurityAlert'
        topThreats:
          type: array
          items:
            $ref: '#/components/schemas/ThreatIP'

    SecurityMetrics:
      type: object
      properties:
        totalRequests:
          type: integer
          description: Total number of requests processed
        blockedRequests:
          type: integer
          description: Number of requests blocked
        uniqueIPs:
          type: integer
          description: Number of unique IP addresses
        flaggedIPs:
          type: integer
          description: Number of flagged IP addresses
        averageResponseTime:
          type: number
          format: float
          description: Average response time in milliseconds
        errorRate:
          type: number
          format: float
          description: Error rate percentage

    SecurityAlert:
      type: object
      required:
        - id
        - type
        - severity
        - message
      properties:
        id:
          type: string
          description: Unique alert identifier
        type:
          type: string
          enum: [rate_limit, suspicious_location, cheat_detection, data_breach]
          description: Type of security alert
        severity:
          type: string
          enum: [low, medium, high, critical]
          description: Alert severity level
        message:
          type: string
          description: Human-readable alert message
        affectedResource:
          type: string
          description: Resource affected by the alert
        timestamp:
          type: string
          format: date-time
          description: When the alert was triggered
        resolved:
          type: boolean
          default: false
          description: Whether the alert has been resolved

    ThreatIP:
      type: object
      required:
        - ipAddress
        - threatScore
        - requestCount
      properties:
        ipAddress:
          type: string
          format: ipv4
          description: IP address identified as threat
        threatScore:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: Threat score (0-100)
        requestCount:
          type: integer
          minimum: 0
          description: Number of requests from this IP
        lastSeen:
          type: string
          format: date-time
          description: When this IP was last seen
        actions:
          type: array
          items:
            type: string
            enum: [blocked, rate_limited, flagged]
          description: Actions taken against this IP

    # WebSocket Objects
    WebSocketMessage:
      type: object
      required:
        - type
        - payload
        - timestamp
      properties:
        type:
          type: string
          enum: [
            player_update, game_update, kill_reported, kill_verified,
            zone_update, safe_zone_update, notification, ping, pong,
            error, connection_established, player_joined, player_left
          ]
          description: Type of WebSocket message
        payload:
          type: object
          description: Message payload (varies by type)
        timestamp:
          type: integer
          format: int64
          description: Message timestamp in epoch milliseconds
        requestId:
          type: string
          description: Optional request ID for tracking responses

    WebSocketConnection:
      type: object
      properties:
        connectionId:
          type: string
          description: Unique connection identifier
        playerId:
          type: string
          description: ID of the connected player
        gameId:
          type: string
          description: ID of the game the player is connected to
        connectedAt:
          type: string
          format: date-time
          description: When the connection was established
        lastPingAt:
          type: string
          format: date-time
          description: When the last ping was received

    # Shrinking Zone Objects
    ShrinkingZoneConfiguration:
      type: object
      properties:
        enabled:
          type: boolean
          default: false
          description: Whether shrinking zone is enabled for this game
        stages:
          type: array
          items:
            $ref: '#/components/schemas/ShrinkingZoneStage'
        initialRadiusMeters:
          type: number
          format: float
          description: Initial radius of the shrinking zone

    ShrinkingZoneState:
      type: object
      required:
        - gameId
        - currentStage
        - currentRadiusMeters
        - centerLatitude
        - centerLongitude
      properties:
        gameId:
          type: string
          description: Game identifier
        currentStage:
          type: integer
          description: Current stage index
        currentRadiusMeters:
          type: number
          description: Current radius of the shrinking zone in meters
        centerLatitude:
          type: number
          description: Center latitude of the zone
        centerLongitude:
          type: number
          description: Center longitude of the zone
        nextRadiusMeters:
          type: number
          description: Target radius for the next shrinking phase in meters
        targetCenterLatitude:
          type: number
          description: Target center latitude for zone movement
        targetCenterLongitude:
          type: number
          description: Target center longitude for zone movement
        phaseEndTime:
          type: string
          format: date-time
          description: When the current phase will end
        nextShrinkTimeEpochMillis:
          type: integer
          format: int64
          description: Epoch milliseconds when next shrink phase begins
        stageStartTimeEpochMillis:
          type: integer
          format: int64
          description: Epoch milliseconds when current stage started
        lastUpdateTimeEpochMillis:
          type: integer
          format: int64
          description: Epoch milliseconds of last state update
        lastUpdated:
          type: string
          format: date-time
          description: ISO timestamp of last update

    ShrinkingZoneStage:
      type: object
      required:
        - stageIndex
        - waitTimeSeconds
        - shrinkTimeSeconds
        - radiusMultiplier
        - damagePerSecond
      properties:
        stageIndex:
          type: integer
          description: Stage number in the shrinking sequence
        waitTimeSeconds:
          type: integer
          description: Time to wait before shrinking begins
        shrinkTimeSeconds:
          type: integer
          description: Duration of the shrinking process
        radiusMultiplier:
          type: number
          description: Multiplier applied to current radius (e.g., 0.5 = shrink to half size)
        damagePerSecond:
          type: number
          description: Damage applied per second to players outside the zone
        description:
          type: string
          description: Human-readable description of this stage

    # Statistics Objects
    PlayerGameStats:
      type: object
      properties:
        gamesPlayed:
          type: integer
          minimum: 0
          description: Total number of games played
        gamesWon:
          type: integer
          minimum: 0
          description: Total number of games won
        totalKills:
          type: integer
          minimum: 0
          description: Total number of kills made
        totalDeaths:
          type: integer
          minimum: 0
          description: Total number of times eliminated
        longestWinStreak:
          type: integer
          minimum: 0
          description: Longest consecutive wins
        averageSurvivalTime:
          type: number
          format: float
          description: Average survival time in minutes
        winRate:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: Win rate percentage
        killDeathRatio:
          type: number
          format: float
          description: Ratio of kills to deaths

    # Payment and Transaction Objects
    Transaction:
      type: object
      required:
        - transactionId
        - playerId
        - amount
        - currency
        - status
      properties:
        transactionId:
          type: string
          description: Unique transaction identifier
        playerId:
          type: string
          description: ID of the player making the transaction
        gameId:
          type: string
          description: ID of the game if transaction is game-related
        amount:
          type: number
          format: decimal
          description: Transaction amount
        currency:
          type: string
          description: Currency code (e.g., USD)
        status:
          type: string
          enum: [PENDING, COMPLETED, FAILED, REFUNDED]
          description: Current status of the transaction
        paymentMethodId:
          type: string
          description: Payment method identifier (e.g., Stripe payment method)
        description:
          type: string
          description: Human-readable transaction description
        createdAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time

    PaymentIntent:
      type: object
      properties:
        id:
          type: string
          description: Stripe payment intent ID
        clientSecret:
          type: string
          description: Client secret for completing payment
        amount:
          type: integer
          description: Amount in cents
        currency:
          type: string
          description: Currency code
        status:
          type: string
          description: Payment intent status

    # Common Objects
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          description: Additional error details
        timestamp:
          type: string
          format: date-time
          description: When the error occurred

    # Request/Response Objects
    CreateGameRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 100
          description: Name of the game
        description:
          type: string
          maxLength: 500
          description: Description of the game
        maxPlayers:
          type: integer
          minimum: 2
          maximum: 10000
          description: Maximum number of players
        entryFee:
          type: object
          properties:
            amount:
              type: number
              format: float
              minimum: 0
            currency:
              type: string
              default: USD
        boundary:
          $ref: '#/components/schemas/GameBoundary'
        shrinkingZoneEnabled:
          type: boolean
          default: false

    UpdateLocationRequest:
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          format: double
          minimum: -90
          maximum: 90
        longitude:
          type: number
          format: double
          minimum: -180
          maximum: 180
        accuracy:
          type: number
          format: float
          minimum: 0
          description: Location accuracy in meters

    CreateSafeZoneRequest:
      type: object
      required:
        - gameId
        - type
        - location
        - radiusMeters
      properties:
        gameId:
          type: string
          description: ID of the game
        type:
          type: string
          enum: [public, private, timed, relocatable]
        name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 500
        location:
          $ref: '#/components/schemas/Location'
        radiusMeters:
          type: number
          format: float
          minimum: 1
          maximum: 1000
        activationTime:
          type: string
          format: date-time
          description: When to activate (for timed zones)
        duration:
          type: integer
          minimum: 1
          description: Duration in minutes (for timed zones)
        maxRelocations:
          type: integer
          minimum: 0
          description: Maximum relocations allowed (for relocatable zones)

  responses:
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: UNAUTHORIZED
            message: Authentication required to access this resource
            timestamp: "2024-01-15T10:30:00Z"

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: FORBIDDEN
            message: You do not have permission to access this resource
            timestamp: "2024-01-15T10:30:00Z"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: NOT_FOUND
            message: The requested resource was not found
            timestamp: "2024-01-15T10:30:00Z"

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: VALIDATION_ERROR
            message: Invalid request data
            details:
              field: name
              error: Field is required
            timestamp: "2024-01-15T10:30:00Z"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: INTERNAL_ERROR
            message: An unexpected error occurred
            timestamp: "2024-01-15T10:30:00Z"

# API Paths will continue in part 2...
paths:
  # Authentication Endpoints
  /auth/signup:
    post:
      tags:
        - Authentication
      summary: Register a new user
      operationId: signUp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                  minLength: 8
                name:
                  type: string
                  maxLength: 50
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  playerId:
                    type: string
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/signin:
    post:
      tags:
        - Authentication
      summary: Sign in a user
      operationId: signIn
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT authentication token
                  refreshToken:
                    type: string
                    description: Refresh token for obtaining new JWT
                  expiresIn:
                    type: integer
                    description: Token expiration time in seconds
                  player:
                    $ref: '#/components/schemas/Player'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/ValidationError'

  # Game Management Endpoints
  /games:
    post:
      tags:
        - Games
      summary: Create a new game
      operationId: createGame
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGameRequest'
      responses:
        '201':
          description: Game created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      tags:
        - Games
      summary: List games with filtering and pagination
      operationId: listGames
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter by game status
          schema:
            type: string
            enum: [pending, active, paused, completed]
        - name: limit
          in: query
          description: Maximum number of games to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of games to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of games
          content:
            application/json:
              schema:
                type: object
                properties:
                  games:
                    type: array
                    items:
                      $ref: '#/components/schemas/Game'
                  total:
                    type: integer
                    description: Total number of games matching filter
                  hasMore:
                    type: boolean
                    description: Whether there are more games to retrieve
        '401':
          $ref: '#/components/responses/Unauthorized'

  /games/{gameId}:
    get:
      tags:
        - Games
      summary: Get game details
      operationId: getGame
      security:
        - bearerAuth: []
      parameters:
        - name: gameId
          in: path
          required: true
          description: Unique identifier of the game
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Game details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /games/{gameId}/start:
    post:
      tags:
        - Games
      summary: Start game and assign targets
      operationId: startGame
      security:
        - bearerAuth: []
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Game started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  game:
                    $ref: '#/components/schemas/Game'
        '400':
          description: Game cannot be started
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /games/{gameId}/join:
    post:
      tags:
        - Games
      summary: Join a game
      operationId: joinGame
      security:
        - bearerAuth: []
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully joined game
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  game:
                    $ref: '#/components/schemas/Game'
        '400':
          description: Cannot join game (game full, already joined, etc.)
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Safe Zone Endpoints
  /games/{gameId}/safezones:
    post:
      tags:
        - Safe Zones
      summary: Create a safe zone
      operationId: createSafeZone
      security:
        - bearerAuth: []
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSafeZoneRequest'
      responses:
        '201':
          description: Safe zone created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SafeZone'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    get:
      tags:
        - Safe Zones
      summary: Get safe zones for a game
      operationId: getGameSafeZones
      security:
        - bearerAuth: []
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: type
          in: query
          description: Filter by safe zone type
          schema:
            type: string
            enum: [public, private, timed, relocatable]
        - name: active
          in: query
          description: Filter by active status
          schema:
            type: boolean
      responses:
        '200':
          description: List of safe zones
          content:
            application/json:
              schema:
                type: object
                properties:
                  safeZones:
                    type: array
                    items:
                      $ref: '#/components/schemas/SafeZone'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /safezones/{safeZoneId}:
    get:
      tags:
        - Safe Zones
      summary: Get safe zone details
      operationId: getSafeZone
      security:
        - bearerAuth: []
      parameters:
        - name: safeZoneId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Safe zone details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SafeZone'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags:
        - Safe Zones
      summary: Update safe zone
      operationId: updateSafeZone
      security:
        - bearerAuth: []
      parameters:
        - name: safeZoneId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 100
                description:
                  type: string
                  maxLength: 500
                radiusMeters:
                  type: number
                  format: float
                  minimum: 1
                  maximum: 1000
                isActive:
                  type: boolean
      responses:
        '200':
          description: Safe zone updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SafeZone'
        '400':
          $ref: '#/components/responses/ValidationError'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Safe Zones
      summary: Delete safe zone
      operationId: deleteSafeZone
      security:
        - bearerAuth: []
      parameters:
        - name: safeZoneId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Safe zone deleted successfully
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Map and Geospatial Endpoints
  /games/{gameId}/map/config:
    get:
      tags:
        - Map
      summary: Get map configuration
      operationId: getMapConfig
      security:
        - bearerAuth: []
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Map configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapConfiguration'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /games/{gameId}/map/heatmap:
    get:
      tags:
        - Map
      summary: Get activity heatmap data
      operationId: getHeatmapData
      security:
        - bearerAuth: []
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: cellSize
          in: query
          description: Size of heatmap cells in meters
          schema:
            type: number
            format: float
            minimum: 10
            maximum: 1000
            default: 100
      responses:
        '200':
          description: Heatmap data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HeatmapData'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Data Export Endpoints
  /export/games:
    get:
      tags:
        - Data Export
      summary: Export game statistics
      operationId: exportGameStatistics
      security:
        - bearerAuth: []
      parameters:
        - name: format
          in: query
          description: Export format
          schema:
            type: string
            enum: [json, csv]
            default: json
        - name: gameId
          in: query
          description: Specific game ID to export
          schema:
            type: string
            format: uuid
        - name: start_date
          in: query
          description: Start date for filtering (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: end_date
          in: query
          description: End date for filtering (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          description: Maximum number of records to export
          schema:
            type: integer
            minimum: 1
            maximum: 10000
            default: 1000
      responses:
        '200':
          description: Exported game statistics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameStatisticsExport'
            text/csv:
              schema:
                type: string
                description: CSV format game statistics
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /export/players:
    get:
      tags:
        - Data Export
      summary: Export player performance data
      operationId: exportPlayerPerformance
      security:
        - bearerAuth: []
      parameters:
        - name: format
          in: query
          description: Export format
          schema:
            type: string
            enum: [json, csv]
            default: json
        - name: playerId
          in: query
          description: Specific player ID to export
          schema:
            type: string
            format: uuid
        - name: gameId
          in: query
          description: Filter by specific game
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          description: Maximum number of records to export
          schema:
            type: integer
            minimum: 1
            maximum: 10000
            default: 1000
      responses:
        '200':
          description: Exported player performance data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerPerformanceExport'
            text/csv:
              schema:
                type: string
                description: CSV format player performance data
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  # Security Monitoring Endpoints
  /security-monitoring/report:
    get:
      tags:
        - Security
      summary: Generate security monitoring report
      operationId: getSecurityReport
      security:
        - adminAuth: []
      parameters:
        - name: start_time
          in: query
          description: Report start time (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: end_time
          in: query
          description: Report end time (ISO 8601)
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Security monitoring report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityMonitoringReport'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /security-monitoring/alerts:
    get:
      tags:
        - Security
      summary: Get security alerts
      operationId: getSecurityAlerts
      security:
        - adminAuth: []
      parameters:
        - name: severity
          in: query
          description: Filter by alert severity
          schema:
            type: string
            enum: [low, medium, high, critical]
        - name: resolved
          in: query
          description: Filter by resolution status
          schema:
            type: boolean
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
      responses:
        '200':
          description: List of security alerts
          content:
            application/json:
              schema:
                type: object
                properties:
                  alerts:
                    type: array
                    items:
                      $ref: '#/components/schemas/SecurityAlert'
                  total:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  # Subscription Management Endpoints
  /subscriptions/tiers:
    get:
      tags:
        - Subscriptions
      summary: Get available subscription tiers
      operationId: getSubscriptionTiers
      responses:
        '200':
          description: List of subscription tiers
          content:
            application/json:
              schema:
                type: object
                properties:
                  tiers:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubscriptionTier'

  /players/me/subscription:
    get:
      tags:
        - Subscriptions
      summary: Get current player's subscription
      operationId: getPlayerSubscription
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Player's current subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionInfo'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Subscriptions
      summary: Subscribe to a tier
      operationId: createSubscription
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tierId
                - paymentMethodId
              properties:
                tierId:
                  type: string
                  description: ID of the subscription tier
                paymentMethodId:
                  type: string
                  description: Stripe payment method ID
      responses:
        '201':
          description: Subscription created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionInfo'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'

    delete:
      tags:
        - Subscriptions
      summary: Cancel subscription
      operationId: cancelSubscription
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Subscription cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  cancellationDate:
                    type: string
                    format: date-time
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Privacy Management Endpoints
  /players/{playerId}/privacy:
    get:
      tags:
        - Privacy
      summary: Get privacy settings
      operationId: getPrivacySettings
      security:
        - bearerAuth: []
      parameters:
        - name: playerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Privacy settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivacySettings'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Privacy
      summary: Update privacy settings
      operationId: updatePrivacySettings
      security:
        - bearerAuth: []
      parameters:
        - name: playerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivacySettings'
      responses:
        '200':
          description: Privacy settings updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivacySettings'
        '400':
          $ref: '#/components/responses/ValidationError'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Location Tracking Endpoints
  /location:
    post:
      tags:
        - Location
      summary: Update player location
      operationId: updateLocation
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLocationRequest'
      responses:
        '200':
          description: Location updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  location:
                    $ref: '#/components/schemas/Location'
                  inSafeZone:
                    type: boolean
                    description: Whether player is currently in a safe zone
                  nearbyPlayers:
                    type: array
                    items:
                      type: object
                      properties:
                        playerId:
                          type: string
                        distance:
                          type: number
                          description: Distance in meters
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # WebSocket Connection Management
  /websocket/connect:
    get:
      tags:
        - WebSocket
      summary: Establish WebSocket connection
      operationId: connectWebSocket
      description: |
        WebSocket connection endpoint. Use the `token` query parameter for authentication.
        
        **Connection URL**: `wss://api.assassingame.com/websocket?token={jwt_token}`
        
        **Message Types**:
        - `player_update`: Real-time location updates
        - `kill_reported`: Kill report notifications
        - `kill_verified`: Kill verification notifications
        - `zone_update`: Shrinking zone updates
        - `safe_zone_update`: Safe zone status changes
        - `game_update`: Game state changes
        - `notification`: General notifications
        - `ping/pong`: Connection health checks
      security:
        - websocketAuth: []
      responses:
        '101':
          description: WebSocket connection established
        '401':
          description: Invalid or missing authentication token
        '403':
          description: Connection not allowed

# Additional endpoints for Player management, Kill reporting, Statistics, etc.
# would continue here following the same pattern...

security:
  - bearerAuth: []