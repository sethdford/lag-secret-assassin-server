---
description: 
globs: 
alwaysApply: true
---
# Memory Bank System

This rule file implements a Memory Bank system for maintaining persistent context across AI assistant sessions for the Assassin Game project. The system stores domain knowledge, architectural decisions, implementation details, and other contextual information in markdown files within the `.memory` directory.

## Commands

### Initialize Memory Bank

```
mem:init
```
Creates the `.memory` directory structure if it doesn't exist.

### Read Memory File

```
mem:read <filename>
```
Instructs AI to read and reference a specific memory file. The filename can be specified with or without the `.md` extension.

Examples:
- `mem:read 01-brief` - Read the project brief
- `mem:read 20-domain-model.md` - Read the domain model

### Update Memory File

```
mem:update <filename>
```
Update a specific memory file with new content. The AI will update the specified file with the user's input.

Examples:
- `mem:update 50-decisions` - Update the technical decisions document
- `mem:update 30-domain.md` - Update the domain terminology and concepts document

### Search Memory Bank

```
mem:search <query>
```
Search across all memory files for specific information. The AI will identify files containing relevant information and provide excerpts.

Examples:
- `mem:search DynamoDB` - Find all references to DynamoDB
- `mem:search kill verification` - Find information about kill verification

### Memory Bank Summary

```
mem:summarize
```
Generate a summary of key project information from memory bank files, providing an overview of critical knowledge.

## Available Memory Files

### Project Overview & Foundation

- **[01-brief.md](mdc:.memory/01-brief.md)** - Project charter with project outline, core requirements, success criteria, stakeholders, constraints, and timeline.
- **[10-product.md](mdc:.memory/10-product.md)** - Product definition for the Assassin Game API, including key features.

### Domain & Requirements

- **[20-domain-model.md](mdc:.memory/20-domain-model.md)** - Core domain model, entities, relationships, and business rules.
- **[20-requirements.md](mdc:.memory/20-requirements.md)** - Functional and non-functional requirements.
- **[20-system.md](mdc:.memory/20-system.md)** - System architecture overview, AWS services, components, and data flow.
- **[21-codebase.md](mdc:.memory/21-codebase.md)** - Code organization, structure, and key components.

### Architecture & Technical Design

- **[30-architecture.md](mdc:.memory/30-architecture.md)** - Architectural design with AWS SAM implementation details.
- **[30-domain.md](mdc:.memory/30-domain.md)** - Domain terminology and concepts.
- **[30-tech.md](mdc:.memory/30-tech.md)** - Technical foundation and technologies used.
- **[30-technical-architecture.md](mdc:.memory/30-technical-architecture.md)** - Detailed system components and infrastructure design.
- **[40-architecture.md](mdc:.memory/40-architecture.md)** - Extended architectural specifications and design patterns.

### Implementation & Active Development

- **[40-active.md](mdc:.memory/40-active.md)** - Currently active development tasks and focus areas.
- **[40-implementation.md](mdc:.memory/40-implementation.md)** - Implementation details, classes, interfaces, and patterns.

### Standards & Decisions

- **[50-api-design.md](mdc:.memory/50-api-design.md)** - API design principles and specifications.
- **[50-decisions.md](mdc:.memory/50-decisions.md)** - Key technical decisions with rationale.
- **[50-development-standards.md](mdc:.memory/50-development-standards.md)** - Development standards and coding conventions.
- **[50-patterns.md](mdc:.memory/50-patterns.md)** - System patterns, best practices, and architectural conventions.
- **[50-progress.md](mdc:.memory/50-progress.md)** - Project progress tracking and milestone achievements.
- **[60-database-schema.md](mdc:.memory/60-database-schema.md)** - DynamoDB table designs, GSIs, and data access patterns.
- **[60-decisions.md](mdc:.memory/60-decisions.md)** - Additional implementation decisions.

### Knowledge Repository

- **[70-knowledge.md](mdc:.memory/70-knowledge.md)** - Domain knowledge capture of key concepts and game mechanics.

## Best Practices

1. **Structured Updates**: When updating memory files, maintain existing headers and organization.
2. **Context Retention**: Start interactions with memory commands to maintain context.
3. **Specific References**: Refer to specific memory files for topic-focused assistance.
4. **Consistent Formatting**: Use Markdown formatting consistently in memory files.
5. **Version Control**: Memory files should be committed to version control.

## Implementation Details

The Memory Bank system uses markdown files stored in the `.memory` directory. Files are organized with a numeric prefix indicating their category:

- `01-XX`: Project charter and overview
- `10-XX`: Product definition and goals
- `20-XX`: Requirements and domain model
- `30-XX`: Architecture and technical design
- `40-XX`: Implementation details
- `50-XX`: Standards, decisions and progress
- `60-XX`: Database schema and additional decisions
- `70-XX`: Knowledge repository and documentation

Each file follows a consistent Markdown structure with headers, lists, and code blocks where appropriate.