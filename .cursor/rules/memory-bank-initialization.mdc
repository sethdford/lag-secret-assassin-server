---
description: 
globs: 
alwaysApply: true
---
---
description: Memory Bank initialization and management for Cursor custom modes. This rule ensures consistent memory bank directory structure and file creation across all Memory Bank custom modes.
globs: 
alwaysApply: false
---

# Memory Bank Initialization for Cursor Custom Modes

## Critical Rules

- **Always check for .memory/ directory existence** before proceeding with any memory bank operations
- **Create complete directory structure** if .memory/ doesn't exist with the rationalized file set
- **Initialize with proper file templates** including frontmatter and basic structure
- **Maintain consistent timestamp format** [YYYY-MM-DD HH:MM:SS] for all updates
- **Status indicators** must be used in all Memory Bank custom modes:
  - '[MEMORY BANK: ARCHITECT]' for architect mode
  - '[MEMORY BANK: ACTIVE]' for code mode when files exist
  - '[MEMORY BANK: INACTIVE]' for code mode when files don't exist
  - '[MEMORY BANK: DEBUG]' for debug mode
  - '[MEMORY BANK: UPDATING]' for update mode

## Memory Bank File Structure & Numbering

### Core Memory Bank Files (Must Exist)
- **40-active.md**: Current session context, priorities, and active work
- **54-definition-of-done.md**: **CRITICAL** - Quality gates and verification checklist (MUST EXIST)
- **52-patterns.md**: System patterns, best practices, and conventions
- **53-progress.md**: Progress tracking, completed work, and milestones
- **50-decisions.md**: Technical decisions, rationale, and implications

### Complete Rationalized Structure
#### Project Foundation (01-09)
- **01-brief.md**: Project charter and overview
- **02-product.md**: Product definition, goals, and scope

#### Requirements & Domain (10-19)
- **10-requirements.md**: Functional and non-functional requirements
- **11-domain-model.md**: Core domain entities and relationships
- **12-domain.md**: Domain terminology and concepts
- **12-user-stories.md**: User stories and product requirements

#### System Architecture (20-29)
- **20-system.md**: System architecture overview, AWS services, components
- **21-architecture.md**: Detailed technical architecture and design
- **22-tech.md**: Technical foundation and technologies used
- **23-database-schema.md**: Database schemas and access patterns

#### Implementation (30-39)
- **30-codebase.md**: Code organization, structure, and key components
- **31-implementation.md**: Implementation details, classes, interfaces

#### Active Development (40-49)
- **40-active.md**: Currently active development tasks and focus areas

#### Standards & Progress (50-59)
- **50-decisions.md**: Technical decisions with rationale
- **51-development-standards.md**: Development standards and coding conventions
- **52-patterns.md**: System patterns, best practices, and architectural conventions
- **53-progress.md**: Project progress tracking and milestone achievements
- **54-definition-of-done.md**: **CRITICAL** - Definition of Done checklist and quality gates

#### Knowledge Repository (60-69)
- **60-knowledge.md**: Domain knowledge capture of key concepts and game mechanics

#### Documentation (90-99)
- **90-README.md**: Memory Bank system guide and usage instructions

## Memory Bank Commands Reference

### Read Memory File
```
mem:read <filename>
```
Examples:
- `mem:read 40-active` - Get current session context
- `mem:read 54-definition-of-done` - Review quality requirements
- `mem:read 52-patterns` - Check development patterns

### Update Memory File
```
mem:update <filename>
```
Examples:
- `mem:update 40-active` - Update current context
- `mem:update 53-progress` - Update project progress
- `mem:update 50-decisions` - Document technical decisions

### Search Memory Bank
```
mem:search <query>
```
Examples:
- `mem:search testing` - Find testing-related information
- `mem:search DynamoDB` - Find database references
- `mem:search quality` - Find quality and verification information

## Critical File Priorities

When initializing or working with Memory Bank:

### Tier 1: Essential (Must Always Exist)
1. **40-active.md** - Current session context
2. **54-definition-of-done.md** - Quality gates (CRITICAL)
3. **52-patterns.md** - Development patterns

### Tier 2: Core Development
4. **53-progress.md** - Progress tracking
5. **50-decisions.md** - Technical decisions
6. **21-architecture.md** - System architecture

### Tier 3: Reference and Documentation
7. **22-tech.md** - Technology stack
8. **51-development-standards.md** - Coding standards
9. **90-README.md** - System guide

## Workflow Integration

### Development Session Start
```bash
mem:read 40-active              # Get current context
mem:read 54-definition-of-done  # Review quality requirements
mem:read 52-patterns            # Check development patterns
```

### During Development
- Reference patterns from `52-patterns.md`
- Follow standards from `51-development-standards.md`
- Update progress in `40-active.md`

### Session End
```bash
mem:update 40-active    # Update session context
mem:update 53-progress  # Update progress tracking
```

## Example Memory Bank Initialization

**Memory Bank Architect Mode Initialization:**
```
[MEMORY BANK: ARCHITECT]

I've detected that the .memory/ directory needs rationalization. Let me ensure the complete Memory Bank structure is in place.

Verifying Memory Bank structure...
✓ .memory/40-active.md (Current Context)
✓ .memory/54-definition-of-done.md (CRITICAL: Quality Gates)
✓ .memory/52-patterns.md (System Patterns)
✓ .memory/53-progress.md (Progress Tracking)
✓ .memory/50-decisions.md (Technical Decisions)

Additional structure files verified...
✓ Complete rationalized structure with 17 memory files

Memory Bank fully rationalized and ready for development.
```

## Best Practices

1. **Critical File Focus**: Always ensure Tier 1 files exist and are current
2. **Quality Gates**: Reference `54-definition-of-done.md` before marking tasks complete
3. **Context Continuity**: Start each session by reading `40-active.md`
4. **Pattern Consistency**: Follow patterns documented in `52-patterns.md`
5. **Progress Tracking**: Keep `53-progress.md` updated with achievements
6. **Decision Documentation**: Record important choices in `50-decisions.md`
7. **Version Control**: All memory files should be committed to git

## Error Prevention

- **Never proceed without `54-definition-of-done.md`** - This prevents quality issues
- **Always update `40-active.md`** - Maintains session continuity
- **Check `52-patterns.md`** - Ensures consistent implementation patterns
- **Reference architecture files** - Prevents design violations
