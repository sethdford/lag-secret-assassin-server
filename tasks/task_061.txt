# Task ID: 61
# Title: Refactor SafeZoneHandler API Endpoint for Better RESTful Design
# Status: pending
# Dependencies: None
# Priority: low
# Description: Redesign the API endpoint for retrieving player-owned safe zones to follow RESTful principles by moving from query parameters to path variables.
# Details:
The current implementation of the `getPlayerOwnedSafeZones` endpoint in `SafeZoneHandler` uses the path `/players/{playerId}/safezones` with a required query parameter `gameId`. This design doesn't follow RESTful best practices as the game context should be part of the resource path.

Implement one of these alternative designs:

1. `/games/{gameId}/players/{playerId}/safezones` - This follows a hierarchical resource structure where safe zones are sub-resources of players, which are sub-resources of games.
2. `/games/{gameId}/safezones?ownerId={playerId}` - This treats safe zones as direct sub-resources of games with filtering by owner.

The first option is recommended as it better represents the resource hierarchy. Implementation steps:

1. Create a new endpoint with the updated path in `SafeZoneHandler`
2. Update the method signature to extract gameId from the path instead of query params
3. Maintain the existing endpoint temporarily with a deprecation notice
4. Update API documentation to reflect the changes
5. Update any client code that calls this endpoint
6. After a suitable transition period, remove the deprecated endpoint

This change will require updates to both backend code and any frontend or client applications that use this API.

# Test Strategy:
1. Unit tests:
   - Test the new endpoint with valid gameId and playerId parameters
   - Test with non-existent gameId and playerId
   - Test with valid gameId but no safe zones for the player
   - Verify the response structure matches the existing endpoint

2. Integration tests:
   - Create end-to-end tests that call the new endpoint and verify correct data retrieval
   - Test authorization rules are properly applied

3. Backward compatibility:
   - Verify the old endpoint still works during the transition period
   - Ensure deprecation notices are properly returned in headers

4. Client testing:
   - Test all client applications that use this API with the new endpoint
   - Verify no functionality is broken

5. Performance testing:
   - Compare response times between old and new endpoints to ensure no performance regression
