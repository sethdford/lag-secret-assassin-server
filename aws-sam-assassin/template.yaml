AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  Assassin Game
  SAM Template for Assassin Game application

# Metadata section can be added here if needed

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment name

  LogRetentionInDays:
    Type: String
    Default: '30'
    AllowedValues:
      - '1'
      - '3'
      - '5'
      - '7'
      - '14'
      - '30'
      - '60'
      - '90'
      - '120'
      - '150'
      - '180'
      - '365'
      - '400'
      - '545'
      - '731'
      - '1827'
      - '3653'
    Description: Number of days to retain logs in CloudWatch

  # Parameters for VPC configuration (used in production)
  DeployInVPC:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Whether to deploy Lambda functions in a VPC

  PrivateSubnet1:
    Type: String
    Default: ''
    Description: First private subnet ID for Lambda functions in production

  PrivateSubnet2:
    Type: String
    Default: ''
    Description: Second private subnet ID for Lambda functions in production

  LambdaSecurityGroup:
    Type: String
    Default: ''
    Description: Security group ID for Lambda functions in production

  EnableApiGatewayAccessLogs:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enable API Gateway access logging (requires CloudWatch Logs role to be configured in the account)

Conditions:
  IsProduction: !Equals
    - !Ref Environment
    - prod
  UseVPC: !Equals
    - !Ref DeployInVPC
    - 'true'
  EnableAccessLogs: !Equals
    - !Ref EnableApiGatewayAccessLogs
    - 'true'

# Moved Globals to top level, BEFORE Resources
Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: java17
    Architectures:
      - x86_64
    Environment:
      Variables:
        JAVA_TOOL_OPTIONS: '-XX:+TieredCompilation -XX:TieredStopAtLevel=1'
        LOG_LEVEL: INFO
        ENV: !Ref Environment
        PLAYERS_TABLE_NAME: !Ref PlayersTable
        KILLS_TABLE_NAME: !Ref KillsTable
        GAMES_TABLE_NAME: !Ref GamesTable
        SAFE_ZONES_TABLE_NAME: !Ref SafeZoneTable
        CONNECTION_TABLE: !Ref WebSocketConnectionsTable
        NOTIFICATIONS_TABLE_NAME: !Ref NotificationsTable
        GAME_ZONE_STATE_TABLE_NAME: !Ref GameZoneStateTable
        TRANSACTIONS_TABLE_NAME: !Ref TransactionsTable
        REPORTS_TABLE_NAME: !Ref ReportsTable
        SECURITY_EVENTS_TABLE_NAME: !Ref SecurityEventsTable
        MEDIA_FILE_TABLE_NAME: !Ref MediaFileTable
        MEDIA_BUCKET_NAME: !Ref MediaBucket
        STRIPE_SECRET_KEY: !Sub '{{resolve:ssm:/assassin/${Environment}/stripe/secret_key:1}}'
        STRIPE_WEBHOOK_SECRET: !Sub '{{resolve:ssm:/assassin/${Environment}/stripe/webhook_secret:1}}'
        EVENT_BUS_NAME: !Ref GameEventBus
        WEBSOCKET_API_ENDPOINT: !Sub 'https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
        ASSASSIN_TEST_MODE: false
    Tracing: Active
    Tags:
      Application: AssassinGame
    VpcConfig: !If
      - UseVPC
      - SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      - !Ref AWS::NoValue

Resources:
  # --- DynamoDB Tables (Define BEFORE Functions that use Globals) ---
  PlayersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-Players
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PlayerID
          AttributeType: S
        - AttributeName: Email
          AttributeType: S
        - AttributeName: LeaderboardStatusPartition
          AttributeType: S
        - AttributeName: KillCount
          AttributeType: 'N'
        - AttributeName: GameID
          AttributeType: S
      KeySchema:
        - AttributeName: PlayerID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: Email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: KillCountIndex
          KeySchema:
            - AttributeName: LeaderboardStatusPartition
              KeyType: HASH
            - AttributeName: KillCount
              KeyType: RANGE
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - PlayerName
        - IndexName: GameIdIndex
          KeySchema:
            - AttributeName: GameID
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  KillsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-Kills
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: KillerID
          AttributeType: S
        - AttributeName: Time
          AttributeType: S
        - AttributeName: VictimID
          AttributeType: S
        - AttributeName: GameID
          AttributeType: S
      KeySchema:
        - AttributeName: KillerID
          KeyType: HASH
        - AttributeName: Time
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: VictimID-Time-index
          KeySchema:
            - AttributeName: VictimID
              KeyType: HASH
            - AttributeName: Time
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GameID-Time-index
          KeySchema:
            - AttributeName: GameID
              KeyType: HASH
            - AttributeName: Time
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  NotificationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-Notifications
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: recipientPlayerId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: recipientPlayerId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  GamesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-Games
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: GameID
          AttributeType: S
        - AttributeName: Status
          AttributeType: S
        - AttributeName: CreatedAt
          AttributeType: S
      KeySchema:
        - AttributeName: GameID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: StatusCreatedAtIndex
          KeySchema:
            - AttributeName: Status
              KeyType: HASH
            - AttributeName: CreatedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  WebSocketConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-WebSocketConnections
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  SafeZoneTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-SafeZones
      AttributeDefinitions:
        - AttributeName: SafeZoneID # Partition Key
          AttributeType: S
        - AttributeName: GameID # GSI Partition Key
          AttributeType: S
      KeySchema:
        - AttributeName: SafeZoneID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: GameIdIndex # Must match GAME_ID_INDEX_NAME in Dao
          KeySchema:
            - AttributeName: GameID
              KeyType: HASH
          Projection:
            ProjectionType: ALL # Or specify projected attributes
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Environment
          Value: !Ref Environment

  GameZoneStateTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-GameZoneState
      BillingMode: PAY_PER_REQUEST # Or provisioned if updates are very frequent/predictable
      AttributeDefinitions:
        - AttributeName: GameID # Partition Key
          AttributeType: S
      KeySchema:
        - AttributeName: GameID
          KeyType: HASH
      SSESpecification:
        SSEEnabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  TransactionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-Transactions
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: TransactionID # PK
          AttributeType: S
        - AttributeName: PlayerID # GSI PK
          AttributeType: S
        - AttributeName: CreatedAt # GSI SK for PlayerTransactionsIndex and GameTransactionsIndex
          AttributeType: S
        - AttributeName: GameID # GSI PK for GameTransactionsIndex, GSI SK for PlayerGameTransactionsIndex
          AttributeType: S
      KeySchema:
        - AttributeName: TransactionID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: PlayerTransactionsIndex # PlayerID + CreatedAt
          KeySchema:
            - AttributeName: PlayerID
              KeyType: HASH
            - AttributeName: CreatedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GameTransactionsIndex # GameID + CreatedAt
          KeySchema:
            - AttributeName: GameID
              KeyType: HASH
            - AttributeName: CreatedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: PlayerGameTransactionsIndex # PlayerID + GameID
          KeySchema:
            - AttributeName: PlayerID # GSI PK
              KeyType: HASH
            - AttributeName: GameID # GSI SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL # Consider projecting only necessary attributes for cost/performance
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  ReportsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-Reports
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: ReportID
          AttributeType: S
        - AttributeName: ReportedPlayerID
          AttributeType: S
        - AttributeName: ReporterPlayerID
          AttributeType: S
        - AttributeName: GameID
          AttributeType: S
        - AttributeName: CreatedAt
          AttributeType: S
      KeySchema:
        - AttributeName: ReportID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ReportedPlayerIndex
          KeySchema:
            - AttributeName: ReportedPlayerID
              KeyType: HASH
            - AttributeName: CreatedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: ReporterPlayerIndex
          KeySchema:
            - AttributeName: ReporterPlayerID
              KeyType: HASH
            - AttributeName: CreatedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GameReportsIndex
          KeySchema:
            - AttributeName: GameID
              KeyType: HASH
            - AttributeName: CreatedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  # Rate Limiting and Security Tracking Table
  SecurityEventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-SecurityEvents
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: SourceIP
          AttributeType: S
        - AttributeName: Timestamp
          AttributeType: S
        - AttributeName: UserID
          AttributeType: S
        - AttributeName: EventType
          AttributeType: S
      KeySchema:
        - AttributeName: SourceIP
          KeyType: HASH
        - AttributeName: Timestamp
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: UserSecurityIndex
          KeySchema:
            - AttributeName: UserID
              KeyType: HASH
            - AttributeName: Timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: EventTypeIndex
          KeySchema:
            - AttributeName: EventType
              KeyType: HASH
            - AttributeName: Timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: TTL
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  # Blocked Entities Table for Automated Blocking System
  BlockedEntitiesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-BlockedEntities
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: EntityID
          AttributeType: S
        - AttributeName: EntityTypeGSI
          AttributeType: S
        - AttributeName: ExpirationDate
          AttributeType: S
      KeySchema:
        - AttributeName: EntityID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EntityTypeIndex
          KeySchema:
            - AttributeName: EntityTypeGSI
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: ExpirationIndex
          KeySchema:
            - AttributeName: ExpirationDate
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  # --- Cognito Resources ---
  AssassinUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub assassin-user-pool-${Environment}
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UserPoolTags:
        Environment: !Ref Environment
        Project: AssassinGame

  AssassinUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub assassin-app-client-${Environment}
      UserPoolId: !Ref AssassinUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 30
      AccessTokenValidity: 1
      IdTokenValidity: 1
      TokenValidityUnits:
        AccessToken: days
        IdToken: days
        RefreshToken: days

  # --- API Gateway (REST) ---
  AssassinApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: '''GET,POST,PUT,DELETE,OPTIONS'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Accept,X-Request-ID'''
        AllowOrigin: '''*'''
        AllowCredentials: false
      EndpointConfiguration:
        Type: REGIONAL
      TracingEnabled: true
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt AssassinUserPool.Arn
            Identity:
              Header: Authorization
      # Enhanced throttling configuration for different endpoint types
      MethodSettings:
        # Default throttling for all endpoints
        - ResourcePath: /*
          HttpMethod: '*'
          ThrottlingBurstLimit: 100
          ThrottlingRateLimit: 50
          MetricsEnabled: true
          LoggingLevel: INFO
          DataTraceEnabled: !If [IsProduction, false, true]
        # Higher limits for location updates (real-time game requirement)
        - ResourcePath: /players/*/location
          HttpMethod: PUT
          ThrottlingBurstLimit: 200
          ThrottlingRateLimit: 100
          MetricsEnabled: true
        # Lower limits for sensitive operations
        - ResourcePath: /games
          HttpMethod: POST
          ThrottlingBurstLimit: 20
          ThrottlingRateLimit: 10
          MetricsEnabled: true
        - ResourcePath: /players/*/eliminations
          HttpMethod: POST
          ThrottlingBurstLimit: 30
          ThrottlingRateLimit: 15
          MetricsEnabled: true
        # Very restrictive for admin operations
        - ResourcePath: /admin/*
          HttpMethod: '*'
          ThrottlingBurstLimit: 10
          ThrottlingRateLimit: 5
          MetricsEnabled: true
      # Usage Plans for API Key-based throttling
      ApiKeySourceType: HEADER
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: '''*'''
              Access-Control-Allow-Methods: '''GET, POST, PUT, DELETE, OPTIONS'''
              Access-Control-Allow-Headers: '''Content-Type, Authorization, X-Amz-Date,
                X-Api-Key, X-Amz-Security-Token'''
              Access-Control-Allow-Credentials: '''false'''
              X-Content-Type-Options: '''nosniff'''
              X-Frame-Options: '''DENY'''
              X-XSS-Protection: '''1; mode=block'''
              Strict-Transport-Security: '''max-age=31536000; includeSubDomains'''
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: '''*'''
              Access-Control-Allow-Methods: '''GET, POST, PUT, DELETE, OPTIONS'''
              Access-Control-Allow-Headers: '''Content-Type, Authorization, X-Amz-Date,
                X-Api-Key, X-Amz-Security-Token'''
              Access-Control-Allow-Credentials: '''false'''
              X-Content-Type-Options: '''nosniff'''
              X-Frame-Options: '''DENY'''
              X-XSS-Protection: '''1; mode=block'''
              Strict-Transport-Security: '''max-age=31536000; includeSubDomains'''
        UNAUTHORIZED:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: '''*'''
              Access-Control-Allow-Methods: '''GET, POST, PUT, DELETE, OPTIONS'''
              Access-Control-Allow-Headers: '''Content-Type, Authorization, X-Amz-Date,
                X-Api-Key, X-Amz-Security-Token'''
              Access-Control-Allow-Credentials: '''false'''
              X-Content-Type-Options: '''nosniff'''
              X-Frame-Options: '''DENY'''
              X-XSS-Protection: '''1; mode=block'''
              Strict-Transport-Security: '''max-age=31536000; includeSubDomains'''
        ACCESS_DENIED:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: '''*'''
              Access-Control-Allow-Methods: '''GET, POST, PUT, DELETE, OPTIONS'''
              Access-Control-Allow-Headers: '''Content-Type, Authorization, X-Amz-Date,
                X-Api-Key, X-Amz-Security-Token'''
              Access-Control-Allow-Credentials: '''false'''
              X-Content-Type-Options: '''nosniff'''
              X-Frame-Options: '''DENY'''
              X-XSS-Protection: '''1; mode=block'''
              Strict-Transport-Security: '''max-age=31536000; includeSubDomains'''
        THROTTLED:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: '''*'''
              Access-Control-Allow-Methods: '''GET, POST, PUT, DELETE, OPTIONS'''
              Access-Control-Allow-Headers: '''Content-Type, Authorization, X-Amz-Date,
                X-Api-Key, X-Amz-Security-Token'''
              Access-Control-Allow-Credentials: '''false'''
              X-Content-Type-Options: '''nosniff'''
              X-Frame-Options: '''DENY'''
              X-XSS-Protection: '''1; mode=block'''
              Strict-Transport-Security: '''max-age=31536000; includeSubDomains'''
              Retry-After: '''60'''
          ResponseTemplates:
            application/json: |
              {
                "error": "Rate limit exceeded",
                "message": "Too many requests. Please try again later.",
                "retryAfter": 60
              }
      AccessLogSetting: !If
        - EnableAccessLogs
        - DestinationArn: !GetAtt ApiGatewayAccessLogGroup.Arn
          Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","path":"$context.path","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength","errorMessage":"$context.error.message","userAgent":"$context.identity.userAgent","throttled":"$context.throttle.rateLimit","throttleBurst":"$context.throttle.burstLimit"}'
        - !Ref AWS::NoValue

  # Usage Plans for API Key-based rate limiting
  BasicUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: !Sub ${Environment}-basic-usage-plan
      Description: Basic usage plan for regular players
      ApiStages:
        - ApiId: !Ref AssassinApi
          Stage: !Ref Environment
      Throttle:
        BurstLimit: 100
        RateLimit: 50
      Quota:
        Limit: 10000
        Period: DAY

  PremiumUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: !Sub ${Environment}-premium-usage-plan
      Description: Premium usage plan for premium subscribers
      ApiStages:
        - ApiId: !Ref AssassinApi
          Stage: !Ref Environment
      Throttle:
        BurstLimit: 200
        RateLimit: 100
      Quota:
        Limit: 50000
        Period: DAY

  AdminUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: !Sub ${Environment}-admin-usage-plan
      Description: Admin usage plan for administrative operations
      ApiStages:
        - ApiId: !Ref AssassinApi
          Stage: !Ref Environment
      Throttle:
        BurstLimit: 50
        RateLimit: 25
      Quota:
        Limit: 5000
        Period: DAY

  # --- API Gateway (WebSocket) ---
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub assassin-websocket-api-${Environment}
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  # WebSocket Routes
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Sub integrations/${ConnectInteg}

  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectFunction.Arn}/invocations

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Sub integrations/${DisconnectInteg}

  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectFunction.Arn}/invocations

  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: DefaultRoute
      Target: !Sub integrations/${DefaultInteg}

  DefaultInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Default Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DefaultMessageFunction.Arn}/invocations

  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - DefaultRoute
    Properties:
      ApiId: !Ref WebSocketApi

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      StageName: !Ref Environment
      DeploymentId: !Ref WebSocketDeployment
      AutoDeploy: true

  # --- EventBridge Resources ---
  GameEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub ${Environment}-assassin-game-events
      Description: !Sub EventBridge bus for ${Environment} Assassin Game events
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  # SQS Dead Letter Queues for event processing
  EventProcessingDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${Environment}-assassin-event-processing-dlq
      MessageRetentionPeriod: 1209600  # 14 days
      VisibilityTimeoutSeconds: 60
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  StreamProcessingDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${Environment}-assassin-stream-processing-dlq
      MessageRetentionPeriod: 1209600  # 14 days
      VisibilityTimeoutSeconds: 60
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  # --- Lambda Functions (Now correctly inherit Globals) ---
  
  # Security Functions
  SecurityHandler:
    Type: AWS::Serverless::Function
    DependsOn:
      - SecurityEventsTable
    Properties:
      Handler: com.assassin.handlers.SecurityHandler::handleRequest
      Description: Handles security operations including rate limiting, abuse detection, and security monitoring.
      CodeUri: ./
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          SECURITY_EVENTS_TABLE_NAME: !Ref SecurityEventsTable
          LOG_LEVEL: INFO
      VpcConfig: !If
        - UseVPC
        - SubnetIds:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroupIds:
            - !Ref LambdaSecurityGroup
        - !Ref AWS::NoValue
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SecurityEventsTable
      Events:
        SecurityRateLimit:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /security/rate-limit
            Method: POST
            Auth:
              Authorizer: NONE  # Internal security service
        SecurityAbuseDetection:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /security/abuse-detection
            Method: POST
            Auth:
              Authorizer: NONE  # Internal security service
        SecurityLocationSpoofing:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /security/location-spoofing
            Method: POST
            Auth:
              Authorizer: NONE  # Internal security service
        SecurityLogEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /security/log-event
            Method: POST
            Auth:
              Authorizer: NONE  # Internal security service
        SecurityHealth:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /security/health
            Method: GET
            Auth:
              Authorizer: NONE  # Health check doesn't need auth

  SecurityMonitoringFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - SecurityEventsTable
      - BlockedEntitiesTable
    Properties:
      Handler: com.assassin.handlers.SecurityMonitoringHandler::handleRequest
      Description: Handles security monitoring, alerting, and threat analysis operations.
      CodeUri: ./
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          SECURITY_EVENTS_TABLE_NAME: !Ref SecurityEventsTable
          BLOCKED_ENTITIES_TABLE_NAME: !Ref BlockedEntitiesTable
          LOG_LEVEL: INFO
      VpcConfig: !If
        - UseVPC
        - SubnetIds:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroupIds:
            - !Ref LambdaSecurityGroup
        - !Ref AWS::NoValue
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SecurityEventsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref BlockedEntitiesTable
      Events:
        GetSecurityReport:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /security-monitoring/report
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        GetSecurityAlerts:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /security-monitoring/alerts
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        GetSecurityMetrics:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /security-monitoring/metrics
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        GetTopThreats:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /security-monitoring/threats
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        PerformAutomatedResponse:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /security-monitoring/response
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        SecurityMonitoringHealth:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /security-monitoring/health
            Method: get
            Auth:
              Authorizer: NONE  # Health check doesn't need auth

  SecurityMetricsSchedulerFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - SecurityEventsTable
      - BlockedEntitiesTable
    Properties:
      Handler: com.assassin.handlers.SecurityMetricsSchedulerHandler::handleRequest
      Description: Scheduled function that publishes security metrics to CloudWatch for monitoring and alerting.
      CodeUri: ./
      MemorySize: 256
      Timeout: 60
      Environment:
        Variables:
          SECURITY_EVENTS_TABLE_NAME: !Ref SecurityEventsTable
          BLOCKED_ENTITIES_TABLE_NAME: !Ref BlockedEntitiesTable
          LOG_LEVEL: INFO
      VpcConfig: !If
        - UseVPC
        - SubnetIds:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroupIds:
            - !Ref LambdaSecurityGroup
        - !Ref AWS::NoValue
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SecurityEventsTable
        - DynamoDBReadPolicy:
            TableName: !Ref BlockedEntitiesTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cloudwatch:PutMetricData
              Resource: '*'
      Events:
        ScheduledMetricsPublishing:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)  # Run every 5 minutes
            Description: Scheduled event to publish security metrics to CloudWatch
            Enabled: true

  PlayerManagementFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - PlayersTable
      - GamesTable
    Properties:
      Handler: com.assassin.handlers.PlayerHandler::handleRequest
      Description: Handles player management operations (create, update, delete, get).
      CodeUri: ./
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          PLAYERS_TABLE_NAME: !Ref PlayersTable
          GAMES_TABLE_NAME: !Ref GamesTable
          LOG_LEVEL: INFO
      VpcConfig: !If
        - UseVPC
        - SubnetIds:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroupIds:
            - !Ref LambdaSecurityGroup
        - !Ref AWS::NoValue
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - DynamoDBReadPolicy:
            TableName: !Ref GamesTable
      Events:
        GetPlayer:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /players/{playerId}
            Method: get
        CreatePlayer:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /players
            Method: post
        UpdatePlayer:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /players/{playerId}
            Method: put
        DeletePlayer:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /players/{playerId}
            Method: delete
        ListPlayers:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /players
            Method: get
        GetMyTarget:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /players/me/target
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  NotificationFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - NotificationsTable
      - PlayersTable
    Properties:
      Handler: com.assassin.handlers.NotificationHandler::processRequest
      Description: Handles notification operations (sending and retrieving notifications).
      CodeUri: ./
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          NOTIFICATIONS_TABLE_NAME: !Ref NotificationsTable
          PLAYERS_TABLE_NAME: !Ref PlayersTable
          LOG_LEVEL: INFO
      VpcConfig: !If
        - UseVPC
        - SubnetIds:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroupIds:
            - !Ref LambdaSecurityGroup
        - !Ref AWS::NoValue
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NotificationsTable
        - DynamoDBReadPolicy:
            TableName: !Ref PlayersTable
      Events:
        CreateNotification:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /notifications
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        GetPlayerNotifications:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /notifications/player/{playerId}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        GetNotification:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /notifications/{notificationId}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        MarkNotificationAsRead:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /notifications/{notificationId}/read
            Method: put

  KillReportingFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - KillsTable
      - PlayersTable
      - GamesTable
      - GameZoneStateTable
    Properties:
      Handler: com.assassin.handlers.KillHandler::handleRequest
      Description: Handles kill reporting and validation operations.
      CodeUri: ./
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          PLAYERS_TABLE_NAME: !Ref PlayersTable
          KILLS_TABLE_NAME: !Ref KillsTable
          GAMES_TABLE_NAME: !Ref GamesTable
          GAME_ZONE_STATE_TABLE_NAME: !Ref GameZoneStateTable
          LOG_LEVEL: INFO
          MODERATION_IMAGE_THRESHOLD: '80.0'
          MODERATION_TEXT_THRESHOLD: '0.7'
          MODERATION_MANUAL_REVIEW_THRESHOLD: '50.0'
          MODERATION_CACHE_ENABLED: 'true'
          MODERATION_CACHE_HOURS: '24'
      VpcConfig: !If
        - UseVPC
        - SubnetIds:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroupIds:
            - !Ref LambdaSecurityGroup
        - !Ref AWS::NoValue
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref KillsTable
        - DynamoDBReadPolicy:
            TableName: !Ref PlayersTable
        - DynamoDBReadPolicy:
            TableName: !Ref GamesTable
        - DynamoDBWritePolicy:
            TableName: !Ref PlayersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref GameZoneStateTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - rekognition:DetectModerationLabels
              Resource: '*'
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - comprehend:DetectToxicContent
                - comprehend:DetectSentiment
              Resource: '*'
      Events:
        ReportKill:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /kills
            Method: post
        GetKill:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /kills/{killId}
            Method: get
        ListKills:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /kills
            Method: get
        GetKillsByKiller:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /kills/killer/{killerId}
            Method: get
        GetKillsByVictim:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /kills/victim/{victimId}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        GetRecentKills:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /kills/recent
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        VerifyKill:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /kills/{killId}/{killTime}/verify
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        GetGameTimeline:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/timeline
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  GameManagementFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - GamesTable
    Properties:
      FunctionName: !Sub ${Environment}-GameManagementFunction
      Handler: com.assassin.handlers.GameManagementHandler::handleRequest
      CodeUri: .
      Runtime: java17
      MemorySize: 512
      Timeout: 30
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GamesTable
      Environment:
        Variables:
          ENV: !Ref Environment
          LOG_LEVEL: INFO
          GAME_TABLE_NAME: !Ref GamesTable
      Events:
        UpdateBoundary:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/boundary
            Method: put

  SafeZoneHandlerFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - SafeZoneTable
      - GamesTable
    Properties:
      Handler: com.assassin.handlers.SafeZoneHandler::handleRequest
      Description: Handles safe zone management operations (create, get, delete).
      CodeUri: ./
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SafeZoneTable
        - DynamoDBReadPolicy:
            TableName: !Ref GamesTable
      Events:
        CreateSafeZone:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/safezones
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        GetSafeZonesByGame:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/safezones
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        GetSafeZone:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /safezones/{safeZoneId}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        DeleteSafeZone:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /safezones/{safeZoneId}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer
        UpdateSafeZone:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /safezones/{safeZoneId}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer
        # New Safe Zone Endpoints
        RelocateSafeZone:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/safezones/{safeZoneId}/location
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer # Only owner should be able to relocate
        GetPlayerOwnedSafeZones:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /players/{playerId}/safezones # Requires gameId as query param
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer # Check if requester can view this player's zones
        GetActiveGameSafeZones:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/safezones/active
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer # Or NONE if active zones are public info for a game

  AuthenticationFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - PlayersTable
      - AssassinUserPool
    Properties:
      Handler: com.assassin.handlers.AuthHandler::handleRequest
      Description: Handles authentication and user management.
      CodeUri: ./
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          PLAYERS_TABLE_NAME: !Ref PlayersTable
          USER_POOL_ID: !Ref AssassinUserPool
          CLIENT_ID: !Ref AssassinUserPoolClient
          LOG_LEVEL: INFO
          STRIPE_SECRET_KEY: !Sub '{{resolve:ssm:/assassin/${Environment}/stripe/secret_key:1}}'
      VpcConfig: !If
        - UseVPC
        - SubnetIds:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroupIds:
            - !Ref LambdaSecurityGroup
        - !Ref AWS::NoValue
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PlayersTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminGetUser
                - cognito-idp:AdminInitiateAuth
                - cognito-idp:AdminRespondToAuthChallenge
                - cognito-idp:SignUp
                - cognito-idp:InitiateAuth
                - cognito-idp:ConfirmSignUp
                - cognito-idp:ForgotPassword
                - cognito-idp:ConfirmForgotPassword
              Resource: !GetAtt AssassinUserPool.Arn
      Events:
        SignUp:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /auth/signup
            Method: post
            Auth:
              Authorizer: NONE
        SignIn:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /auth/signin
            Method: post
            Auth:
              Authorizer: NONE
        ForgotPassword:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /auth/forgot-password
            Method: post
            Auth:
              Authorizer: NONE
        ResetPassword:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /auth/reset-password
            Method: post
            Auth:
              Authorizer: NONE

  ConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: com.assassin.handlers.websockets.ConnectHandler::handleRequest
      Environment:
        Variables:
          PLAYERS_TABLE: !Ref PlayersTable
          GAMES_TABLE: !Ref GamesTable
          CONNECTION_TABLE: !Ref WebSocketConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable

  DisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: com.assassin.handlers.websockets.DisconnectHandler::handleRequest
      Environment:
        Variables:
          PLAYERS_TABLE: !Ref PlayersTable
          GAMES_TABLE: !Ref GamesTable
          CONNECTION_TABLE: !Ref WebSocketConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable

  DefaultMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: com.assassin.handlers.websockets.DefaultMessageHandler::handleRequest
      Environment:
        Variables:
          PLAYERS_TABLE: !Ref PlayersTable
          GAMES_TABLE: !Ref GamesTable
          CONNECTION_TABLE: !Ref WebSocketConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable
        - Statement:
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource:
                - !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*

  ConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ConnectFunction.Arn
      Principal: apigateway.amazonaws.com

  DisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DisconnectFunction.Arn
      Principal: apigateway.amazonaws.com

  DefaultMessagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DefaultMessageFunction.Arn
      Principal: apigateway.amazonaws.com

  LocationHandlerFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - PlayersTable
      - GamesTable
      - GameZoneStateTable
    Properties:
      CodeUri: .
      Handler: com.assassin.handlers.LocationHandler::handleRequest
      FunctionName: !Sub assassin-location-handler-${Environment}
      Environment:
        Variables:
          PLAYERS_TABLE_NAME: !Ref PlayersTable
          GAMES_TABLE_NAME: !Ref GamesTable
          GAME_ZONE_STATE_TABLE_NAME: !Ref GameZoneStateTable
          LOG_LEVEL: INFO
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref PlayersTable
        - DynamoDBReadPolicy:
            TableName: !Ref GamesTable
        - DynamoDBReadPolicy:
            TableName: !Ref GameZoneStateTable
      Events:
        UpdateLocation:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /location
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  MapHandlerFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - PlayersTable
      - GamesTable
      - GameZoneStateTable
      - SafeZoneTable
    Properties:
      CodeUri: .
      Handler: com.assassin.handlers.MapHandler::handleRequest
      FunctionName: !Sub assassin-map-handler-${Environment}
      Environment:
        Variables:
          PLAYERS_TABLE_NAME: !Ref PlayersTable
          GAMES_TABLE_NAME: !Ref GamesTable
          GAME_ZONE_STATE_TABLE_NAME: !Ref GameZoneStateTable
          SAFE_ZONES_TABLE_NAME: !Ref SafeZoneTable
          LOG_LEVEL: INFO
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PlayersTable
        - DynamoDBReadPolicy:
            TableName: !Ref GamesTable
        - DynamoDBReadPolicy:
            TableName: !Ref GameZoneStateTable
        - DynamoDBReadPolicy:
            TableName: !Ref SafeZoneTable
      Events:
        GetMapConfig:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/map/config
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        GetZoneOverlays:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/map/zones
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        GetActivityHeatmap:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/map/heatmap
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        GetProximityData:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/map/proximity
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        GetGameBoundary:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/map/boundary
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  AdminHandlerFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - PlayersTable
      - GamesTable
    Properties:
      CodeUri: .
      Handler: com.assassin.handlers.AdminHandler::handleRequest
      FunctionName: !Sub assassin-admin-handler-${Environment}
      Environment:
        Variables:
          PLAYERS_TABLE_NAME: !Ref PlayersTable
          GAMES_TABLE_NAME: !Ref GamesTable
          LOG_LEVEL: INFO
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PlayersTable
        - DynamoDBReadPolicy:
            TableName: !Ref GamesTable
      Events:
        AdminTimeline:
          Type: Api
          Properties:
            Path: /admin/games/{gameId}/timeline
            Method: get
            RestApiId: !Ref AssassinApi
            Auth:
              Authorizer: CognitoAuthorizer
        AdminOverview:
          Type: Api
          Properties:
            Path: /admin/games/{gameId}/overview
            Method: get
            RestApiId: !Ref AssassinApi
            Auth:
              Authorizer: CognitoAuthorizer
        AdminPlayers:
          Type: Api
          Properties:
            Path: /admin/games/{gameId}/players
            Method: get
            RestApiId: !Ref AssassinApi
            Auth:
              Authorizer: CognitoAuthorizer
        AdminAnalytics:
          Type: Api
          Properties:
            Path: /admin/games/{gameId}/analytics
            Method: get
            RestApiId: !Ref AssassinApi
            Auth:
              Authorizer: CognitoAuthorizer
        AdminGames:
          Type: Api
          Properties:
            Path: /admin/games
            Method: get
            RestApiId: !Ref AssassinApi
            Auth:
              Authorizer: CognitoAuthorizer
        AdminHealth:
          Type: Api
          Properties:
            Path: /admin/system/health
            Method: get
            RestApiId: !Ref AssassinApi
            Auth:
              Authorizer: CognitoAuthorizer

  ZoneUpdateFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - GamesTable
      - PlayersTable
      - GameZoneStateTable
    Properties:
      Handler: com.assassin.handlers.ZoneUpdateHandler::handleRequest
      Description: Periodically updates shrinking zone state and applies damage to
        players outside the zone.
      CodeUri: ./
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref GamesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref GameZoneStateTable
        - AWSLambdaBasicExecutionRole
      Events:
        ZoneUpdateSchedule:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)
            Enabled: true

  PaymentFunction:
    # New Function for Handling Payments
    Type: AWS::Serverless::Function
    DependsOn:
      - TransactionsTable
      - GamesTable
      - PlayersTable
    Properties:
      Handler: com.assassin.handlers.PaymentHandler::handleRequest
      Description: Handles payment operations, such as processing entry fees.
      CodeUri: ./
      MemorySize: 512 # Adjust as needed
      Timeout: 30 # Adjust as needed
      Environment:
        Variables:
          TRANSACTIONS_TABLE_NAME: !Ref TransactionsTable
          GAMES_TABLE_NAME: !Ref GamesTable # If needed for validation
          PLAYERS_TABLE_NAME: !Ref PlayersTable # If needed for player context
          STRIPE_SECRET_KEY: !Sub '{{resolve:ssm:/assassin/${Environment}/stripe/secret_key:1}}'
          LOG_LEVEL: INFO
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TransactionsTable
        - DynamoDBReadPolicy:
            # If game/player validation is done within handler
            TableName: !Ref GamesTable
        - DynamoDBReadPolicy:
            TableName: !Ref PlayersTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub /assassin/${Environment}/stripe/secret_key
      Events:
        PayEntryFee:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/pay-entry-fee
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer # Requires user to be authenticated
        CreatePaymentIntent:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/create-payment-intent
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer # Support for Apple Pay, Google Pay, etc.
        ConfirmPayment:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /payments/{paymentIntentId}/confirm
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer # Confirm payment completion

  SubscriptionFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - PlayersTable
    Properties:
      Handler: com.assassin.handlers.SubscriptionHandler::handleRequest
      Description: Handles subscription management operations including tier management and Stripe webhooks.
      CodeUri: ./
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          PLAYERS_TABLE_NAME: !Ref PlayersTable
          STRIPE_SECRET_KEY: !Sub '{{resolve:ssm:/assassin/${Environment}/stripe/secret_key:1}}'
          STRIPE_WEBHOOK_SECRET: !Sub '{{resolve:ssm:/assassin/${Environment}/stripe/webhook_secret:1}}'
          LOG_LEVEL: INFO
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub /assassin/${Environment}/stripe/secret_key
        - SSMParameterReadPolicy:
            ParameterName: !Sub /assassin/${Environment}/stripe/webhook_secret
      Events:
        GetSubscriptionTiers:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /subscriptions/tiers
            Method: get
            Auth:
              Authorizer: NONE # Public endpoint
        GetMySubscription:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /players/me/subscription
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        SubscribePlayer:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /players/me/subscription
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        CancelMySubscription:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /players/me/subscription
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer
        StripeWebhook:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /subscriptions/webhook
            Method: post
            Auth:
              Authorizer: NONE # Stripe webhooks don't use Cognito auth

  # --- Event Processing Functions ---
  PlayerStreamFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - PlayersTable
      - GameEventBus
    Properties:
      Handler: com.assassin.handlers.stream.PlayerStreamHandler::handleRequest
      Description: Processes DynamoDB Stream events from Players table
      CodeUri: ./
      MemorySize: 512
      Timeout: 60
      Environment:
        Variables:
          EVENT_BUS_NAME: !Ref GameEventBus
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt StreamProcessingDLQ.Arn
      ReservedConcurrentExecutions: 5
      Events:
        PlayerStreamEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt PlayersTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 5
            ParallelizationFactor: 2
            MaximumRetryAttempts: 3
            BisectBatchOnFunctionError: true
            MaximumRecordAgeInSeconds: 86400
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref GameEventBus
        - DynamoDBStreamReadPolicy:
            TableName: !Ref PlayersTable
            StreamName: !Select [3, !Split ["/", !GetAtt PlayersTable.StreamArn]]
        - SQSSendMessagePolicy:
            QueueName: !GetAtt StreamProcessingDLQ.QueueName

  GameStreamFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - GamesTable
      - GameEventBus
    Properties:
      Handler: com.assassin.handlers.stream.GameStreamHandler::handleRequest
      Description: Processes DynamoDB Stream events from Games table
      CodeUri: ./
      MemorySize: 512
      Timeout: 60
      Environment:
        Variables:
          EVENT_BUS_NAME: !Ref GameEventBus
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt StreamProcessingDLQ.Arn
      ReservedConcurrentExecutions: 5
      Events:
        GameStreamEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt GamesTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 5
            ParallelizationFactor: 2
            MaximumRetryAttempts: 3
            BisectBatchOnFunctionError: true
            MaximumRecordAgeInSeconds: 86400
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref GameEventBus
        - DynamoDBStreamReadPolicy:
            TableName: !Ref GamesTable
            StreamName: !Select [3, !Split ["/", !GetAtt GamesTable.StreamArn]]
        - SQSSendMessagePolicy:
            QueueName: !GetAtt StreamProcessingDLQ.QueueName

  KillStreamFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - KillsTable
      - GameEventBus
    Properties:
      Handler: com.assassin.handlers.stream.GameStreamHandler::handleRequest
      Description: Processes DynamoDB Stream events from Kills table
      CodeUri: ./
      MemorySize: 512
      Timeout: 60
      Environment:
        Variables:
          EVENT_BUS_NAME: !Ref GameEventBus
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt StreamProcessingDLQ.Arn
      ReservedConcurrentExecutions: 5
      Events:
        KillStreamEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt KillsTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 5
            ParallelizationFactor: 2
            MaximumRetryAttempts: 3
            BisectBatchOnFunctionError: true
            MaximumRecordAgeInSeconds: 86400
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref GameEventBus
        - DynamoDBStreamReadPolicy:
            TableName: !Ref KillsTable
            StreamName: !Select [3, !Split ["/", !GetAtt KillsTable.StreamArn]]
        - SQSSendMessagePolicy:
            QueueName: !GetAtt StreamProcessingDLQ.QueueName

  EventBridgeEventFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - GameEventBus
      - WebSocketApi
    Properties:
      Handler: com.assassin.handlers.EventBridgeEventHandler::handleRequest
      Description: Processes EventBridge events and routes them to appropriate services
      CodeUri: ./
      MemorySize: 512
      Timeout: 60
      Environment:
        Variables:
          EVENT_BUS_NAME: !Ref GameEventBus
          WEBSOCKET_API_ENDPOINT: !Sub 'https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt EventProcessingDLQ.Arn
      ReservedConcurrentExecutions: 10
      Events:
        PlayerEvents:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref GameEventBus
            Pattern:
              source: ["assassin-game"]
              detail-type:
                - "assassin.player.created"
                - "assassin.player.status_changed"
                - "assassin.player.eliminated"
                - "assassin.player.joined_game"
                - "assassin.player.left_game"
        GameEvents:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref GameEventBus
            Pattern:
              source: ["assassin-game"]
              detail-type:
                - "assassin.game.started"
                - "assassin.game.ended"
                - "assassin.game.status_changed"
                - "assassin.game.boundary_updated"
        KillEvents:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref GameEventBus
            Pattern:
              source: ["assassin-game"]
              detail-type:
                - "assassin.kill.reported"
                - "assassin.kill.verified"
                - "assassin.kill.confirmed"
        SecurityEvents:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref GameEventBus
            Pattern:
              source: ["assassin-game"]
              detail-type:
                - "assassin.security.threat_detected"
                - "assassin.security.violation_occurred"
                - "assassin.security.suspicious_activity"
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref GameEventBus
        - DynamoDBReadPolicy:
            TableName: !Ref PlayersTable
        - DynamoDBReadPolicy:
            TableName: !Ref GamesTable
        - DynamoDBReadPolicy:
            TableName: !Ref WebSocketConnectionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref NotificationsTable
        - Statement:
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource:
                - !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*
        - SQSSendMessagePolicy:
            QueueName: !GetAtt EventProcessingDLQ.QueueName

  # --- Log Groups ---
  ApiGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: EnableAccessLogs
    Properties:
      LogGroupName: !Sub /aws/apigateway/${Environment}-AssassinApi-AccessLogs
      RetentionInDays: !Ref LogRetentionInDays

  PlayerManagementLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Environment}-PlayerManagementFunctionLogs
      RetentionInDays: !Ref LogRetentionInDays

  NotificationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Environment}-NotificationFunctionLogs
      RetentionInDays: !Ref LogRetentionInDays

  KillReportingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Environment}-KillReportingFunctionLogs
      RetentionInDays: !Ref LogRetentionInDays

  GameManagementLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Environment}-GameManagementFunctionLogs
      RetentionInDays: !Ref LogRetentionInDays

  AuthenticationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Environment}-AuthenticationFunctionLogs
      RetentionInDays: !Ref LogRetentionInDays

  GetStatisticsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Environment}-GetStatisticsFunctionLogs
      RetentionInDays: !Ref LogRetentionInDays

  ConnectLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Environment}-ConnectFunctionLogs
      RetentionInDays: !Ref LogRetentionInDays

  DisconnectLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Environment}-DisconnectFunctionLogs
      RetentionInDays: !Ref LogRetentionInDays

  DefaultMessageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Environment}-DefaultMessageFunctionLogs
      RetentionInDays: !Ref LogRetentionInDays

  PaymentLogGroup:
    # Log group for the new PaymentFunction
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Environment}-PaymentFunctionLogs
      RetentionInDays: !Ref LogRetentionInDays

  SubscriptionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Environment}-SubscriptionFunctionLogs
      RetentionInDays: !Ref LogRetentionInDays

  # --- CloudWatch Alarms ---
  ApiGateway5xxErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-ApiGateway-5xxError
      AlarmDescription: Alarm if API Gateway has too many 5xx errors
      Namespace: AWS/ApiGateway
      MetricName: 5XXError
      Dimensions:
        - Name: ApiName
          Value: !Ref AssassinApi
        - Name: Stage
          Value: !Ref Environment
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 5
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

  LambdaErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-Lambda-Errors
      AlarmDescription: Alarm if any Lambda function has too many errors
      Namespace: AWS/Lambda
      MetricName: Errors
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 5
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

  DynamoDBThrottlesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-DynamoDB-Throttles
      AlarmDescription: Alarm if DynamoDB has too many throttled requests
      Namespace: AWS/DynamoDB
      MetricName: ThrottledRequests
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 5
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

  # --- Security Monitoring Resources ---
  
  # SNS Topic for Security Alerts
  SecurityAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${Environment}-assassin-security-alerts
      DisplayName: !Sub ${Environment} Assassin Game Security Alerts
      KmsMasterKeyId: alias/aws/sns
  
  SecurityAlertsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref SecurityAlertsTopic
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudwatch.amazonaws.com
            Action:
              - sns:Publish
            Resource: !Ref SecurityAlertsTopic
  
  # CloudWatch Log Group for Security Events
  SecurityEventsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Environment}-SecurityEventsFunctionLogs
      RetentionInDays: !Ref LogRetentionInDays
  
  SecurityMonitoringLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Environment}-SecurityMonitoringFunctionLogs
      RetentionInDays: !Ref LogRetentionInDays
  
  # Security-specific CloudWatch Alarms
  
  # API Gateway Rate Limiting Alarm
  ApiGatewayThrottlingAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-ApiGateway-Throttling
      AlarmDescription: Alarm when API Gateway throttling occurs frequently
      Namespace: AWS/ApiGateway
      MetricName: ThrottleCount
      Dimensions:
        - Name: ApiName
          Value: !Ref AssassinApi
        - Name: Stage
          Value: !Ref Environment
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 50
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref SecurityAlertsTopic
  
  # High 4xx Error Rate (potential abuse)
  ApiGateway4xxErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-ApiGateway-4xxError-High
      AlarmDescription: Alarm when 4xx error rate is high (potential abuse)
      Namespace: AWS/ApiGateway
      MetricName: 4XXError
      Dimensions:
        - Name: ApiName
          Value: !Ref AssassinApi
        - Name: Stage
          Value: !Ref Environment
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 3
      Threshold: 100
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref SecurityAlertsTopic
  
  # Lambda Concurrent Executions Alarm (potential DDoS)
  LambdaConcurrentExecutionsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-Lambda-ConcurrentExecutions-High
      AlarmDescription: Alarm when Lambda concurrent executions are unusually high
      Namespace: AWS/Lambda
      MetricName: ConcurrentExecutions
      Statistic: Maximum
      Period: 60
      EvaluationPeriods: 3
      Threshold: 900  # Adjust based on your expected load
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref SecurityAlertsTopic
  
  # Lambda Duration Alarm (potential resource exhaustion attacks)
  LambdaDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-Lambda-Duration-High
      AlarmDescription: Alarm when Lambda functions are taking too long (potential attack)
      Namespace: AWS/Lambda
      MetricName: Duration
      Statistic: Average
      Period: 300
      EvaluationPeriods: 3
      Threshold: 25000  # 25 seconds
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref SecurityAlertsTopic
  
  # DynamoDB Error Rate Alarm
  DynamoDBErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-DynamoDB-Errors
      AlarmDescription: Alarm when DynamoDB has high error rates
      Namespace: AWS/DynamoDB
      MetricName: SystemErrors
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref SecurityAlertsTopic
  
  # Custom Metric for Security Events
  SecurityEventsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-Security-Events-High
      AlarmDescription: Alarm when security events are detected at high frequency
      Namespace: AssassinGame/Security
      MetricName: SecurityEventsCount
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 20
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref SecurityAlertsTopic
  
  # CloudWatch Dashboard for Security Monitoring
  SecurityMonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub ${Environment}-AssassinGame-Security-Monitoring
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApiGateway", "Count", "ApiName", "${AssassinApi}", "Stage", "${Environment}" ],
                  [ ".", "4XXError", ".", ".", ".", "." ],
                  [ ".", "5XXError", ".", ".", ".", "." ],
                  [ ".", "ThrottleCount", ".", ".", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "API Gateway Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations" ],
                  [ ".", "Errors" ],
                  [ ".", "Duration" ],
                  [ ".", "ConcurrentExecutions" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/DynamoDB", "ConsumedReadCapacityUnits", "TableName", "${PlayersTable}" ],
                  [ ".", "ConsumedWriteCapacityUnits", ".", "." ],
                  [ ".", "ThrottledRequests", ".", "." ],
                  [ ".", "SystemErrors", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "DynamoDB Metrics - Players Table",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AssassinGame/Security", "SecurityEventsCount" ],
                  [ ".", "BlockedEntitiesCount" ],
                  [ ".", "ThreatScoreMax" ],
                  [ ".", "AlertsGenerated" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Security Events",
                "period": 300
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 12,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE '/aws/lambda/${Environment}-SecurityEventsFunctionLogs' | fields @timestamp, @message\n| filter @message like /ERROR/ or @message like /SECURITY/\n| sort @timestamp desc\n| limit 100",
                "region": "${AWS::Region}",
                "title": "Recent Security Events",
                "view": "table"
              }
            }
          ]
        }
  
  # --- S3 Resources for Media Storage ---
  MediaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${Environment}-assassin-media-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicReadAccess: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
          - Id: TransitionToIA
            Status: Enabled
            Transition:
              Days: 30
              StorageClass: STANDARD_IA
          - Id: TransitionToGlacier
            Status: Enabled
            Transition:
              Days: 90
              StorageClass: GLACIER
          - Id: ExpireOldVersions
            Status: Enabled
            NoncurrentVersionExpiration:
              NoncurrentDays: 30
          - Id: DeleteExpiredFiles
            Status: Enabled
            Filter:
              Prefix: temp/
            ExpirationInDays: 7
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt MediaProcessingFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: profile/
                  - Name: prefix
                    Value: kill-verification/
                  - Name: prefix
                    Value: screenshots/
      CorsConfiguration:
        CorsRules:
          - Id: AllowedOrigins
            AllowedMethods:
              - GET
              - PUT
              - POST
              - HEAD
            AllowedOrigins:
              - "*"
            AllowedHeaders:
              - "*"
            MaxAge: 3600
            ExposedHeaders:
              - ETag
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame
        - Key: Purpose
          Value: MediaStorage

  MediaBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MediaBucket
      PolicyDocument:
        Statement:
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub "${MediaBucket}/*"
              - !GetAtt MediaBucket.Arn
            Condition:
              Bool:
                "aws:SecureTransport": false
          - Sid: AllowCloudFrontAccess
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${MediaCloudFrontOAI}"
            Action: "s3:GetObject"
            Resource: !Sub "${MediaBucket}/*"

  MediaFileTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-MediaFiles
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: mediaId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: gameId
          AttributeType: S
        - AttributeName: processingStatus
          AttributeType: S
        - AttributeName: moderationStatus
          AttributeType: S
        - AttributeName: uploadedAt
          AttributeType: S
      KeySchema:
        - AttributeName: mediaId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: uploadedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GameIdIndex
          KeySchema:
            - AttributeName: gameId
              KeyType: HASH
            - AttributeName: uploadedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: ProcessingStatusIndex
          KeySchema:
            - AttributeName: processingStatus
              KeyType: HASH
            - AttributeName: uploadedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: ModerationStatusIndex
          KeySchema:
            - AttributeName: moderationStatus
              KeyType: HASH
            - AttributeName: uploadedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  MediaCloudFrontOAI:
    Type: AWS::CloudFront::OriginAccessIdentity
    Properties:
      OriginAccessIdentityConfig:
        Comment: !Sub "OAI for ${Environment} AssassinGame Media Bucket"

  MediaCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub "${Environment} AssassinGame Media CDN"
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_100
        DefaultCacheBehavior:
          TargetOriginId: MediaBucketOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # AWS Managed CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # AWS Managed CORS-S3Origin
        Origins:
          - Id: MediaBucketOrigin
            DomainName: !GetAtt MediaBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${MediaCloudFrontOAI}"
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: /404.html
            ErrorCachingMinTTL: 300
          - ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /404.html
            ErrorCachingMinTTL: 300
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  MediaUploadFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - MediaBucket
      - MediaFileTable
    Properties:
      Handler: com.assassin.handlers.MediaUploadHandler::handleRequest
      Description: Handles media upload operations with presigned URLs and file management
      CodeUri: ./
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          MEDIA_BUCKET_NAME: !Ref MediaBucket
          MEDIA_FILE_TABLE_NAME: !Ref MediaFileTable
          CLOUDFRONT_DISTRIBUTION_ID: !Ref MediaCloudFrontDistribution
          CLOUDFRONT_DOMAIN: !GetAtt MediaCloudFrontDistribution.DomainName
          PRESIGNED_URL_EXPIRATION_MINUTES: '15'
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref MediaBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref MediaFileTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - rekognition:DetectModerationLabels
                - rekognition:DetectLabels
                - comprehend:DetectSentiment
                - comprehend:DetectPiiEntities
              Resource: '*'
            - Effect: Allow
              Action:
                - cloudfront:CreateInvalidation
              Resource: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${MediaCloudFrontDistribution}"
      Events:
        MediaUpload:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /media/upload
            Method: POST
        GetMedia:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /media/{mediaId}
            Method: GET
        DeleteMedia:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /media/{mediaId}
            Method: DELETE
        ProcessMedia:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /media/{mediaId}/process
            Method: POST

  MediaProcessingFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - MediaBucket
      - MediaFileTable
    Properties:
      Handler: com.assassin.handlers.MediaProcessingHandler::handleRequest
      Description: Processes uploaded media files (thumbnails, moderation, metadata extraction)
      CodeUri: ./
      MemorySize: 1024
      Timeout: 300
      Environment:
        Variables:
          MEDIA_BUCKET_NAME: !Ref MediaBucket
          MEDIA_FILE_TABLE_NAME: !Ref MediaFileTable
          CLOUDFRONT_DISTRIBUTION_ID: !Ref MediaCloudFrontDistribution
          CLOUDFRONT_DOMAIN: !GetAtt MediaCloudFrontDistribution.DomainName
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref MediaBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref MediaFileTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - rekognition:DetectModerationLabels
                - rekognition:DetectLabels
                - rekognition:DetectText
                - rekognition:DetectFaces
                - comprehend:DetectSentiment
                - comprehend:DetectPiiEntities
              Resource: '*'
            - Effect: Allow
              Action:
                - cloudfront:CreateInvalidation
              Resource: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${MediaCloudFrontDistribution}"

  MediaProcessingPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt MediaProcessingFunction.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt MediaBucket.Arn

  MediaLifecycleFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - MediaBucket
      - MediaFileTable
    Properties:
      Handler: com.assassin.handlers.MediaLifecycleHandler::handleRequest
      Description: Scheduled function for media lifecycle management and cleanup
      CodeUri: ./
      MemorySize: 512
      Timeout: 900
      Environment:
        Variables:
          MEDIA_BUCKET_NAME: !Ref MediaBucket
          MEDIA_FILE_TABLE_NAME: !Ref MediaFileTable
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref MediaBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref MediaFileTable
      Events:
        ScheduledCleanup:
          Type: Schedule
          Properties:
            Schedule: rate(6 hours)
            Description: Scheduled media cleanup and lifecycle management
            Enabled: true

  # --- SSM Parameters ---
  StripeWebhookSecretParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /assassin/${Environment}/stripe/webhook_secret
      Type: SecureString
      Value: placeholder_webhook_secret_change_me
      Description: Stripe webhook endpoint secret for subscription events

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${AssassinApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref AssassinUserPool

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref AssassinUserPoolClient

  PlayerTableName:
    Description: Player DynamoDB table name
    Value: !Ref PlayersTable

  KillTableName:
    Description: Kill DynamoDB table name
    Value: !Ref KillsTable

  GameTableName:
    Description: Game DynamoDB table name
    Value: !Ref GamesTable

  TransactionsTableName:
    Description: Transactions DynamoDB table name
    Value: !Ref TransactionsTable

  WebSocketApiEndpoint:
    Description: WebSocket API Gateway endpoint URL
    Value: !Sub wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}

  SecurityAlertsTopicArn:
    Description: SNS Topic ARN for security alerts
    Value: !Ref SecurityAlertsTopic

  SecurityMonitoringDashboardURL:
    Description: CloudWatch Dashboard URL for security monitoring
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${Environment}-AssassinGame-Security-Monitoring

  SecurityEventsTableName:
    Description: Security Events DynamoDB table name
    Value: !Ref SecurityEventsTable

  BlockedEntitiesTableName:
    Description: Blocked Entities DynamoDB table name
    Value: !Ref BlockedEntitiesTable

  MediaBucketName:
    Description: S3 Media Storage Bucket Name
    Value: !Ref MediaBucket

  MediaFileTableName:
    Description: Media Files DynamoDB table name
    Value: !Ref MediaFileTable

  MediaCdnDomain:
    Description: CloudFront CDN domain for media delivery
    Value: !GetAtt MediaCloudFrontDistribution.DomainName

  MediaCdnDistributionId:
    Description: CloudFront Distribution ID for media CDN
    Value: !Ref MediaCloudFrontDistribution

  GameEventBusName:
    Description: EventBridge bus name for game events
    Value: !Ref GameEventBus

  GameEventBusArn:
    Description: EventBridge bus ARN for game events
    Value: !GetAtt GameEventBus.Arn

  StreamProcessingDLQUrl:
    Description: SQS DLQ URL for stream processing failures
    Value: !Ref StreamProcessingDLQ

  EventProcessingDLQUrl:
    Description: SQS DLQ URL for event processing failures
    Value: !Ref EventProcessingDLQ

  PlayerStreamArn:
    Description: Players table DynamoDB Stream ARN
    Value: !GetAtt PlayersTable.StreamArn

  GameStreamArn:
    Description: Games table DynamoDB Stream ARN
    Value: !GetAtt GamesTable.StreamArn

  KillStreamArn:
    Description: Kills table DynamoDB Stream ARN
    Value: !GetAtt KillsTable.StreamArn