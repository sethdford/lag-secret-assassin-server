AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  Assassin Game
  SAM Template for Assassin Game application

# Metadata section can be added here if needed

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment name

  LogRetentionInDays:
    Type: Number
    Default: 30
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
    Description: Number of days to retain logs in CloudWatch

  # Parameters for VPC configuration (used in production)
  DeployInVPC:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Whether to deploy Lambda functions in a VPC

  PrivateSubnet1:
    Type: String
    Default: ''
    Description: First private subnet ID for Lambda functions in production

  PrivateSubnet2:
    Type: String
    Default: ''
    Description: Second private subnet ID for Lambda functions in production

  LambdaSecurityGroup:
    Type: String
    Default: ''
    Description: Security group ID for Lambda functions in production

  EnableApiGatewayAccessLogs:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enable API Gateway access logging (requires CloudWatch Logs role to be configured in the account)

Conditions:
  IsProduction: !Equals
    - !Ref Environment
    - prod
  UseVPC: !Equals
    - !Ref DeployInVPC
    - 'true'
  EnableAccessLogs: !Equals
    - !Ref EnableApiGatewayAccessLogs
    - 'true'

# Moved Globals to top level, BEFORE Resources
Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: java17
    Architectures:
      - x86_64
    Environment:
      Variables:
        JAVA_TOOL_OPTIONS: '-XX:+TieredCompilation -XX:TieredStopAtLevel=1'
        LOG_LEVEL: INFO
        ENV: !Ref Environment
        PLAYERS_TABLE_NAME: !Ref PlayersTable
        KILLS_TABLE_NAME: !Ref KillsTable
        GAMES_TABLE_NAME: !Ref GamesTable
        SAFE_ZONES_TABLE_NAME: !Ref SafeZoneTable
        CONNECTION_TABLE: !Ref WebSocketConnectionsTable
        NOTIFICATIONS_TABLE_NAME: !Ref NotificationsTable
        GAME_ZONE_STATE_TABLE_NAME: !Ref GameZoneStateTable
        TRANSACTIONS_TABLE_NAME: !Ref TransactionsTable
        REPORTS_TABLE_NAME: !Ref ReportsTable
        ITEMS_TABLE_NAME: !Ref ItemsTable
        PLAYER_INVENTORY_TABLE_NAME: !Ref PlayerInventoryTable
        SUBSCRIPTION_TIERS_TABLE_NAME: !Ref SubscriptionTiersTable
        STRIPE_SECRET_KEY: !Sub '{{resolve:ssm:/assassin/${Environment}/stripe/secret_key:1}}'
        ASSASSIN_TEST_MODE: false
    Tracing: Active
    Tags:
      Application: AssassinGame
    VpcConfig: !If
      - UseVPC
      - SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      - !Ref AWS::NoValue

Resources:
  # --- DynamoDB Tables (Define BEFORE Functions that use Globals) ---
  PlayersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-Players
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PlayerID
          AttributeType: S
        - AttributeName: Email
          AttributeType: S
        - AttributeName: LeaderboardStatusPartition
          AttributeType: S
        - AttributeName: KillCount
          AttributeType: 'N'
        - AttributeName: GameID
          AttributeType: S
        - AttributeName: stripeSubscriptionId
          AttributeType: S
      KeySchema:
        - AttributeName: PlayerID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: Email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: KillCountIndex
          KeySchema:
            - AttributeName: LeaderboardStatusPartition
              KeyType: HASH
            - AttributeName: KillCount
              KeyType: RANGE
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - PlayerName
        - IndexName: GameIdIndex
          KeySchema:
            - AttributeName: GameID
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: StripeSubscriptionIdIndex
          KeySchema:
            - AttributeName: stripeSubscriptionId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  KillsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-Kills
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: KillerID
          AttributeType: S
        - AttributeName: Time
          AttributeType: S
        - AttributeName: VictimID
          AttributeType: S
        - AttributeName: GameID
          AttributeType: S
      KeySchema:
        - AttributeName: KillerID
          KeyType: HASH
        - AttributeName: Time
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: VictimID-Time-index
          KeySchema:
            - AttributeName: VictimID
              KeyType: HASH
            - AttributeName: Time
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GameID-Time-index
          KeySchema:
            - AttributeName: GameID
              KeyType: HASH
            - AttributeName: Time
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  NotificationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-Notifications
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: recipientPlayerId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: recipientPlayerId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  GamesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-Games
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: GameID
          AttributeType: S
        - AttributeName: Status
          AttributeType: S
        - AttributeName: CreatedAt
          AttributeType: S
      KeySchema:
        - AttributeName: GameID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: StatusCreatedAtIndex
          KeySchema:
            - AttributeName: Status
              KeyType: HASH
            - AttributeName: CreatedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  WebSocketConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-WebSocketConnections
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  SafeZoneTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-SafeZones
      AttributeDefinitions:
        - AttributeName: SafeZoneID # Partition Key
          AttributeType: S
        - AttributeName: GameID # GSI Partition Key
          AttributeType: S
      KeySchema:
        - AttributeName: SafeZoneID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: GameIdIndex # Must match GAME_ID_INDEX_NAME in Dao
          KeySchema:
            - AttributeName: GameID
              KeyType: HASH
          Projection:
            ProjectionType: ALL # Or specify projected attributes
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Environment
          Value: !Ref Environment

  GameZoneStateTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-GameZoneState
      BillingMode: PAY_PER_REQUEST # Or provisioned if updates are very frequent/predictable
      AttributeDefinitions:
        - AttributeName: GameID # Partition Key
          AttributeType: S
      KeySchema:
        - AttributeName: GameID
          KeyType: HASH
      SSESpecification:
        SSEEnabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  TransactionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-Transactions
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: TransactionID # PK
          AttributeType: S
        - AttributeName: PlayerID # GSI PK
          AttributeType: S
        - AttributeName: CreatedAt # GSI SK for PlayerTransactionsIndex and GameTransactionsIndex
          AttributeType: S
        - AttributeName: GameID # GSI PK for GameTransactionsIndex, GSI SK for PlayerGameTransactionsIndex
          AttributeType: S
      KeySchema:
        - AttributeName: TransactionID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: PlayerTransactionsIndex # PlayerID + CreatedAt
          KeySchema:
            - AttributeName: PlayerID
              KeyType: HASH
            - AttributeName: CreatedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GameTransactionsIndex # GameID + CreatedAt
          KeySchema:
            - AttributeName: GameID
              KeyType: HASH
            - AttributeName: CreatedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: PlayerGameTransactionsIndex # PlayerID + GameID
          KeySchema:
            - AttributeName: PlayerID # GSI PK
              KeyType: HASH
            - AttributeName: GameID # GSI SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL # Consider projecting only necessary attributes for cost/performance
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  ReportsTable:
    # Fixed DynamoDB Table for Reports
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-Reports
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: reportId
          AttributeType: S
        - AttributeName: gameId
          AttributeType: S
        - AttributeName: reportingPlayerId
          AttributeType: S
        - AttributeName: reportedPlayerId
          AttributeType: S
        - AttributeName: status
          AttributeType: S
      KeySchema:
        - AttributeName: reportId # Fixed: matches AttributeDefinitions
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: GameReportsIndex
          KeySchema:
            - AttributeName: gameId # Fixed: matches AttributeDefinitions
              KeyType: HASH
            - AttributeName: status
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: ReportingPlayerReportsIndex
          KeySchema:
            - AttributeName: reportingPlayerId # Fixed: matches AttributeDefinitions
              KeyType: HASH
            - AttributeName: status
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: ReportedPlayerReportsIndex
          KeySchema:
            - AttributeName: reportedPlayerId # Fixed: matches AttributeDefinitions
              KeyType: HASH
            - AttributeName: status
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  ItemsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-Items
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: ItemID
          AttributeType: S
        - AttributeName: ItemType
          AttributeType: S
        - AttributeName: IsActive
          AttributeType: S
      KeySchema:
        - AttributeName: ItemID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ItemTypeIndex
          KeySchema:
            - AttributeName: ItemType
              KeyType: HASH
            - AttributeName: IsActive
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  PlayerInventoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-PlayerInventory
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PlayerID
          AttributeType: S
        - AttributeName: InventoryItemID
          AttributeType: S
        - AttributeName: ItemID
          AttributeType: S
        - AttributeName: GameID
          AttributeType: S
      KeySchema:
        - AttributeName: PlayerID
          KeyType: HASH
        - AttributeName: InventoryItemID
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: ItemIdIndex
          KeySchema:
            - AttributeName: ItemID
              KeyType: HASH
            - AttributeName: PlayerID
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: PlayerGameInventoryIndex
          KeySchema:
            - AttributeName: PlayerID
              KeyType: HASH
            - AttributeName: GameID
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

  # --- Cognito Resources ---
  AssassinUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub assassin-user-pool-${Environment}
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UserPoolTags:
        Environment: !Ref Environment
        Project: AssassinGame

  AssassinUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub assassin-app-client-${Environment}
      UserPoolId: !Ref AssassinUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 30
      AccessTokenValidity: 1
      IdTokenValidity: 1
      TokenValidityUnits:
        AccessToken: days
        IdToken: days
        RefreshToken: days

  # --- API Gateway (REST) ---
  AssassinApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: '''GET,POST,PUT,DELETE,OPTIONS'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Accept,X-Request-ID'''
        AllowOrigin: '''*'''
      EndpointConfiguration:
        Type: REGIONAL
      TracingEnabled: true
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt AssassinUserPool.Arn
            Identity:
              Header: Authorization
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: '''http://localhost:3001'''
              Access-Control-Allow-Methods: '''GET, POST, PUT, DELETE, OPTIONS'''
              Access-Control-Allow-Headers: '''Content-Type, Authorization, X-Amz-Date,
                X-Api-Key, X-Amz-Security-Token'''
              Access-Control-Allow-Credentials: '''true'''
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: '''http://localhost:3001'''
              Access-Control-Allow-Methods: '''GET, POST, PUT, DELETE, OPTIONS'''
              Access-Control-Allow-Headers: '''Content-Type, Authorization, X-Amz-Date,
                X-Api-Key, X-Amz-Security-Token'''
              Access-Control-Allow-Credentials: '''true'''
        UNAUTHORIZED:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: '''http://localhost:3001'''
              Access-Control-Allow-Methods: '''GET, POST, PUT, DELETE, OPTIONS'''
              Access-Control-Allow-Headers: '''Content-Type, Authorization, X-Amz-Date,
                X-Api-Key, X-Amz-Security-Token'''
              Access-Control-Allow-Credentials: '''true'''
        ACCESS_DENIED:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: '''http://localhost:3001'''
              Access-Control-Allow-Methods: '''GET, POST, PUT, DELETE, OPTIONS'''
              Access-Control-Allow-Headers: '''Content-Type, Authorization, X-Amz-Date,
                X-Api-Key, X-Amz-Security-Token'''
              Access-Control-Allow-Credentials: '''true'''
      AccessLogSetting: !If
        - EnableAccessLogs
        - DestinationArn: !GetAtt ApiGatewayAccessLogGroup.Arn
          Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","path":"$context.path","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength","errorMessage":"$context.error.message"}'
        - !Ref AWS::NoValue
      MethodSettings:
        - ResourcePath: /*
          HttpMethod: '*'
          ThrottlingBurstLimit: 100
          ThrottlingRateLimit: 50
          MetricsEnabled: true

  # --- API Gateway (WebSocket) ---
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub assassin-websocket-api-${Environment}
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  # WebSocket Routes
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Sub integrations/${ConnectInteg}

  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectFunction.Arn}/invocations

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Sub integrations/${DisconnectInteg}

  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectFunction.Arn}/invocations

  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: DefaultRoute
      Target: !Sub integrations/${DefaultInteg}

  DefaultInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Default Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DefaultMessageFunction.Arn}/invocations

  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - DefaultRoute
    Properties:
      ApiId: !Ref WebSocketApi

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      StageName: !Ref Environment
      DeploymentId: !Ref WebSocketDeployment
      AutoDeploy: true

  # --- Lambda Functions (Now correctly inherit Globals) ---
  PlayerManagementFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - PlayersTable
      - GamesTable
    Properties:
      Handler: com.assassin.handlers.PlayerHandler::handleRequest
      Description: Handles player management operations (create, update, delete, get).
      CodeUri: ./
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          PLAYERS_TABLE_NAME: !Ref PlayersTable
          GAMES_TABLE_NAME: !Ref GamesTable
          LOG_LEVEL: INFO
      VpcConfig: !If
        - UseVPC
        - SubnetIds:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroupIds:
            - !Ref LambdaSecurityGroup
        - !Ref AWS::NoValue
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - DynamoDBReadPolicy:
            TableName: !Ref GamesTable
      Events:
        GetPlayer:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /players/{playerId}
            Method: get
        CreatePlayer:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /players
            Method: post
        UpdatePlayer:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /players/{playerId}
            Method: put
        DeletePlayer:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /players/{playerId}
            Method: delete
        ListPlayers:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /players
            Method: get
        GetMyTarget:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /players/me/target
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  NotificationFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - NotificationsTable
      - PlayersTable
    Properties:
      Handler: com.assassin.handlers.NotificationHandler::processRequest
      Description: Handles notification operations (sending and retrieving notifications).
      CodeUri: ./
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          NOTIFICATIONS_TABLE_NAME: !Ref NotificationsTable
          PLAYERS_TABLE_NAME: !Ref PlayersTable
          LOG_LEVEL: INFO
      VpcConfig: !If
        - UseVPC
        - SubnetIds:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroupIds:
            - !Ref LambdaSecurityGroup
        - !Ref AWS::NoValue
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NotificationsTable
        - DynamoDBReadPolicy:
            TableName: !Ref PlayersTable
      Events:
        CreateNotification:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /notifications
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        GetPlayerNotifications:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /notifications/player/{playerId}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        GetNotification:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /notifications/{notificationId}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        MarkNotificationAsRead:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /notifications/{notificationId}/read
            Method: put

  KillReportingFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - KillsTable
      - PlayersTable
      - GamesTable
      - GameZoneStateTable
    Properties:
      Handler: com.assassin.handlers.KillHandler::handleRequest
      Description: Handles kill reporting and validation operations.
      CodeUri: ./
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          PLAYERS_TABLE_NAME: !Ref PlayersTable
          KILLS_TABLE_NAME: !Ref KillsTable
          GAMES_TABLE_NAME: !Ref GamesTable
          GAME_ZONE_STATE_TABLE_NAME: !Ref GameZoneStateTable
          LOG_LEVEL: INFO
          MODERATION_IMAGE_THRESHOLD: '80.0'
          MODERATION_TEXT_THRESHOLD: '0.7'
          MODERATION_MANUAL_REVIEW_THRESHOLD: '50.0'
          MODERATION_CACHE_ENABLED: 'true'
          MODERATION_CACHE_HOURS: '24'
      VpcConfig: !If
        - UseVPC
        - SubnetIds:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroupIds:
            - !Ref LambdaSecurityGroup
        - !Ref AWS::NoValue
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref KillsTable
        - DynamoDBReadPolicy:
            TableName: !Ref PlayersTable
        - DynamoDBReadPolicy:
            TableName: !Ref GamesTable
        - DynamoDBWritePolicy:
            TableName: !Ref PlayersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref GameZoneStateTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - rekognition:DetectModerationLabels
              Resource: '*'
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - comprehend:DetectToxicContent
                - comprehend:DetectSentiment
              Resource: '*'
      Events:
        ReportKill:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /kills
            Method: post
        GetKill:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /kills/{killId}
            Method: get
        ListKills:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /kills
            Method: get
        GetKillsByKiller:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /kills/killer/{killerId}
            Method: get
        GetKillsByVictim:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /kills/victim/{victimId}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        GetRecentKills:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /kills/recent
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        VerifyKill:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /kills/{killId}/{killTime}/verify
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        GetGameTimeline:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/timeline
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  GameManagementFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - GamesTable
    Properties:
      FunctionName: !Sub ${Environment}-GameManagementFunction
      Handler: com.assassin.handlers.GameManagementHandler::handleRequest
      CodeUri: .
      Runtime: java17
      MemorySize: 512
      Timeout: 30
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GamesTable
      Environment:
        Variables:
          ENV: !Ref Environment
          LOG_LEVEL: INFO
          GAME_TABLE_NAME: !Ref GamesTable
      Events:
        UpdateBoundary:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/boundary
            Method: put

  SafeZoneHandlerFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - SafeZoneTable
      - GamesTable
    Properties:
      Handler: com.assassin.handlers.SafeZoneHandler::handleRequest
      Description: Handles safe zone management operations (create, get, delete).
      CodeUri: ./
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SafeZoneTable
        - DynamoDBReadPolicy:
            TableName: !Ref GamesTable
      Events:
        CreateSafeZone:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/safezones
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        GetSafeZonesByGame:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/safezones
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        GetSafeZone:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /safezones/{safeZoneId}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        DeleteSafeZone:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /safezones/{safeZoneId}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer
        UpdateSafeZone:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /safezones/{safeZoneId}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer
        # New Safe Zone Endpoints
        RelocateSafeZone:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/safezones/{safeZoneId}/location
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer # Only owner should be able to relocate
        GetPlayerOwnedSafeZones:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /players/{playerId}/safezones # Requires gameId as query param
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer # Check if requester can view this player's zones
        GetActiveGameSafeZones:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/safezones/active
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer # Or NONE if active zones are public info for a game

  AuthenticationFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - PlayersTable
      - AssassinUserPool
    Properties:
      Handler: com.assassin.handlers.AuthHandler::handleRequest
      Description: Handles authentication and user management.
      CodeUri: ./
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          PLAYERS_TABLE_NAME: !Ref PlayersTable
          USER_POOL_ID: !Ref AssassinUserPool
          CLIENT_ID: !Ref AssassinUserPoolClient
          LOG_LEVEL: INFO
          STRIPE_SECRET_KEY: !Sub '{{resolve:ssm:/assassin/${Environment}/stripe/secret_key:1}}'
      VpcConfig: !If
        - UseVPC
        - SubnetIds:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroupIds:
            - !Ref LambdaSecurityGroup
        - !Ref AWS::NoValue
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PlayersTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminGetUser
                - cognito-idp:AdminInitiateAuth
                - cognito-idp:AdminRespondToAuthChallenge
                - cognito-idp:SignUp
                - cognito-idp:InitiateAuth
                - cognito-idp:ConfirmSignUp
                - cognito-idp:ForgotPassword
                - cognito-idp:ConfirmForgotPassword
              Resource: !GetAtt AssassinUserPool.Arn
      Events:
        SignUp:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /auth/signup
            Method: post
            Auth:
              Authorizer: NONE
        SignIn:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /auth/signin
            Method: post
            Auth:
              Authorizer: NONE
        ForgotPassword:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /auth/forgot-password
            Method: post
            Auth:
              Authorizer: NONE
        ResetPassword:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /auth/reset-password
            Method: post
            Auth:
              Authorizer: NONE

  ConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: com.assassin.handlers.websockets.ConnectHandler::handleRequest
      Environment:
        Variables:
          PLAYERS_TABLE: !Ref PlayersTable
          GAMES_TABLE: !Ref GamesTable
          CONNECTION_TABLE: !Ref WebSocketConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable

  DisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: com.assassin.handlers.websockets.DisconnectHandler::handleRequest
      Environment:
        Variables:
          PLAYERS_TABLE: !Ref PlayersTable
          GAMES_TABLE: !Ref GamesTable
          CONNECTION_TABLE: !Ref WebSocketConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable

  DefaultMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: com.assassin.handlers.websockets.DefaultMessageHandler::handleRequest
      Environment:
        Variables:
          PLAYERS_TABLE: !Ref PlayersTable
          GAMES_TABLE: !Ref GamesTable
          CONNECTION_TABLE: !Ref WebSocketConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable
        - Statement:
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource:
                - !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*

  ConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ConnectFunction.Arn
      Principal: apigateway.amazonaws.com

  DisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DisconnectFunction.Arn
      Principal: apigateway.amazonaws.com

  DefaultMessagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DefaultMessageFunction.Arn
      Principal: apigateway.amazonaws.com

  LocationHandlerFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - PlayersTable
      - GamesTable
      - GameZoneStateTable
    Properties:
      CodeUri: .
      Handler: com.assassin.handlers.LocationHandler::handleRequest
      FunctionName: !Sub assassin-location-handler-${Environment}
      Environment:
        Variables:
          PLAYERS_TABLE_NAME: !Ref PlayersTable
          GAMES_TABLE_NAME: !Ref GamesTable
          GAME_ZONE_STATE_TABLE_NAME: !Ref GameZoneStateTable
          LOG_LEVEL: INFO
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref PlayersTable
        - DynamoDBReadPolicy:
            TableName: !Ref GamesTable
        - DynamoDBReadPolicy:
            TableName: !Ref GameZoneStateTable
      Events:
        UpdateLocation:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /location
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  ZoneUpdateFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - GamesTable
      - PlayersTable
      - GameZoneStateTable
    Properties:
      Handler: com.assassin.handlers.ZoneUpdateHandler::handleRequest
      Description: Periodically updates shrinking zone state and applies damage to
        players outside the zone.
      CodeUri: ./
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref GamesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref GameZoneStateTable
        - AWSLambdaBasicExecutionRole
      Events:
        ZoneUpdateSchedule:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)
            Enabled: true

  PaymentFunction:
    # New Function for Handling Payments
    Type: AWS::Serverless::Function
    DependsOn:
      - TransactionsTable
      - GamesTable
      - PlayersTable
    Properties:
      Handler: com.assassin.handlers.PaymentHandler::handleRequest
      Description: Handles payment operations, such as processing entry fees.
      CodeUri: ./
      MemorySize: 512 # Adjust as needed
      Timeout: 30 # Adjust as needed
      Environment:
        Variables:
          TRANSACTIONS_TABLE_NAME: !Ref TransactionsTable
          GAMES_TABLE_NAME: !Ref GamesTable # If needed for validation
          PLAYERS_TABLE_NAME: !Ref PlayersTable # If needed for player context
          STRIPE_SECRET_KEY: !Sub '{{resolve:ssm:/assassin/${Environment}/stripe/secret_key:1}}'
          LOG_LEVEL: INFO
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TransactionsTable
        - DynamoDBReadPolicy:
            # If game/player validation is done within handler
            TableName: !Ref GamesTable
        - DynamoDBReadPolicy:
            TableName: !Ref PlayersTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub /assassin/${Environment}/stripe/secret_key
      Events:
        PayEntryFee:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/pay-entry-fee
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer # Requires user to be authenticated

  EmergencyFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - GamesTable
      - PlayersTable
      - NotificationsTable
    Properties:
      Handler: com.assassin.handlers.EmergencyHandler::handleRequest
      Description: Handles emergency game operations including pause, resume, and status checks.
      CodeUri: ./
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          GAMES_TABLE_NAME: !Ref GamesTable
          PLAYERS_TABLE_NAME: !Ref PlayersTable
          NOTIFICATIONS_TABLE_NAME: !Ref NotificationsTable
          CONNECTIONS_TABLE_NAME: !Ref WebSocketConnectionsTable
          WEBSOCKET_API_ENDPOINT: !Sub wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
          LOG_LEVEL: INFO
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GamesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref NotificationsTable
        - DynamoDBReadPolicy:
            TableName: !Ref WebSocketConnectionsTable
        - Statement:
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource:
                - !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*
      Events:
        PauseGame:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/emergency/pause
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        ResumeGame:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/emergency/resume
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        GetEmergencyStatus:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/emergency/status
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  ItemHandlerFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - ItemsTable
      - PlayerInventoryTable
      - PlayersTable
    Properties:
      Handler: com.assassin.handlers.ItemHandler::handleRequest
      Description: Handles item and inventory-related API endpoints including listing items, purchasing items, viewing inventory, and using items.
      CodeUri: ./
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          ITEMS_TABLE_NAME: !Ref ItemsTable
          PLAYER_INVENTORY_TABLE_NAME: !Ref PlayerInventoryTable
          PLAYERS_TABLE_NAME: !Ref PlayersTable
          TRANSACTIONS_TABLE_NAME: !Ref TransactionsTable
          LOG_LEVEL: INFO
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ItemsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayerInventoryTable
        - DynamoDBReadPolicy:
            TableName: !Ref PlayersTable
        - DynamoDBReadPolicy:
            TableName: !Ref TransactionsTable
      Events:
        GetItems:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /items
            Method: get
            Auth:
              Authorizer: NONE
        PurchaseItem:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /players/me/inventory/purchase
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        GetPlayerInventory:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /players/me/inventory
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        UseInventoryItem:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /players/me/inventory/{inventoryItemId}/use
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  ZoneStateFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - GameZoneStateTable
      - GamesTable
    Properties:
      Handler: com.assassin.handlers.ZoneStateHandler::handleRequest
      Description: Handles API queries for current shrinking zone state (center, radius, timer).
      CodeUri: ./
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          GAME_ZONE_STATE_TABLE_NAME: !Ref GameZoneStateTable
          GAMES_TABLE_NAME: !Ref GamesTable
          LOG_LEVEL: INFO
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref GameZoneStateTable
        - DynamoDBReadPolicy:
            TableName: !Ref GamesTable
      Events:
        GetZoneState:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/zone/state
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        GetZoneStatus:
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /games/{gameId}/zone/status
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  StripeWebhookHandlerFunction: # New function for Stripe Webhooks
    Type: AWS::Serverless::Function
    DependsOn:
      - PlayersTable
      - SubscriptionTiersTable # Depends on the new table as well
    Properties:
      Handler: com.assassin.handlers.StripeWebhookHandler::handleRequest
      Description: Handles incoming Stripe webhook events for subscriptions.
      CodeUri: ./
      # MemorySize and Timeout will use Globals unless overridden
      Environment:
        Variables:
          # PLAYERS_TABLE_NAME and SUBSCRIPTION_TIERS_TABLE_NAME inherited from Globals
          STRIPE_WEBHOOK_SECRET: !Sub '{{resolve:ssm:/assassin/${Environment}/stripe/webhook_secret:1}}' # Needs to be created in SSM
          LOG_LEVEL: INFO
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PlayersTable
        - DynamoDBReadPolicy: # Webhook might only need to read tiers, or write if it de-normalizes tier info to Player
            TableName: !Ref SubscriptionTiersTable 
        - SSMParameterReadPolicy:
            ParameterName: !Sub /assassin/${Environment}/stripe/webhook_secret
      Events:
        StripeWebhook: 
          Type: Api
          Properties:
            RestApiId: !Ref AssassinApi
            Path: /stripe/webhooks # Standard path for Stripe webhooks
            Method: post
            Auth:
              Authorizer: NONE # Stripe webhooks are secured by signature verification, not Cognito

  # --- Log Groups ---
  ApiGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: EnableAccessLogs
    Properties:
      LogGroupName: !Sub /aws/apigateway/${Environment}-AssassinApi-AccessLogs
      RetentionInDays: !Ref LogRetentionInDays

  PlayerManagementLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Environment}-PlayerManagementFunctionLogs
      RetentionInDays: !Ref LogRetentionInDays

  NotificationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Environment}-NotificationFunctionLogs
      RetentionInDays: !Ref LogRetentionInDays

  KillReportingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Environment}-KillReportingFunctionLogs
      RetentionInDays: !Ref LogRetentionInDays

  GameManagementLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Environment}-GameManagementFunctionLogs
      RetentionInDays: !Ref LogRetentionInDays

  AuthenticationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Environment}-AuthenticationFunctionLogs
      RetentionInDays: !Ref LogRetentionInDays

  GetStatisticsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Environment}-GetStatisticsFunctionLogs
      RetentionInDays: !Ref LogRetentionInDays

  ConnectLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Environment}-ConnectFunctionLogs
      RetentionInDays: !Ref LogRetentionInDays

  DisconnectLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Environment}-DisconnectFunctionLogs
      RetentionInDays: !Ref LogRetentionInDays

  DefaultMessageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Environment}-DefaultMessageFunctionLogs
      RetentionInDays: !Ref LogRetentionInDays

  PaymentLogGroup:
    # Log group for the new PaymentFunction
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Environment}-PaymentFunctionLogs
      RetentionInDays: !Ref LogRetentionInDays

  StripeWebhookHandlerLogGroup: # Log group for the new function
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Environment}-StripeWebhookHandlerFunctionLogs
      RetentionInDays: !Ref LogRetentionInDays

  # --- CloudWatch Alarms ---
  ApiGateway5xxErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-ApiGateway-5xxError
      AlarmDescription: Alarm if API Gateway has too many 5xx errors
      Namespace: AWS/ApiGateway
      MetricName: 5XXError
      Dimensions:
        - Name: ApiName
          Value: !Ref AssassinApi
        - Name: Stage
          Value: !Ref Environment
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 5
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

  LambdaErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-Lambda-Errors
      AlarmDescription: Alarm if any Lambda function has too many errors
      Namespace: AWS/Lambda
      MetricName: Errors
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 5
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

  DynamoDBThrottlesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-DynamoDB-Throttles
      AlarmDescription: Alarm if DynamoDB has too many throttled requests
      Namespace: AWS/DynamoDB
      MetricName: ThrottledRequests
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 5
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

  SubscriptionTiersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-SubscriptionTiers
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: TierId # Partition Key
          AttributeType: S
        - AttributeName: IsActive # For GSI to fetch active tiers
          AttributeType: S # Store as 'TRUE'/'FALSE' string or use N for 0/1 if number
        - AttributeName: DisplayOrder # For GSI sort key
          AttributeType: N
      KeySchema:
        - AttributeName: TierId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ActiveTiersOrderedIndex
          KeySchema:
            - AttributeName: IsActive # PK of GSI
              KeyType: HASH
            - AttributeName: DisplayOrder # SK of GSI
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: AssassinGame

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${AssassinApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref AssassinUserPool

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref AssassinUserPoolClient

  PlayerTableName:
    Description: Player DynamoDB table name
    Value: !Ref PlayersTable

  KillTableName:
    Description: Kill DynamoDB table name
    Value: !Ref KillsTable

  GameTableName:
    Description: Game DynamoDB table name
    Value: !Ref GamesTable

  TransactionsTableName:
    Description: Transactions DynamoDB table name
    Value: !Ref TransactionsTable

  WebSocketApiEndpoint:
    Description: WebSocket API Gateway endpoint URL
    Value: !Sub wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}